{"version":3,"sources":["cough.js","person.js","transmit.js","plot.js","create.js","App.js","serviceWorker.js","index.js","coronavirus.png","angel.png","logo.svg"],"names":["React","Component","Person","props","sendData","send","id","infected","x","y","arrived","occur","recovered","percent","parentCallback","xGoal","meeting","Math","random","yGoal","floor","xStart","yStart","social","masks","angel","deathRate","key","state","date","Date","allNodes","first","infex","time","cough","totalDistance","fractionTime","this","sqrt","pow","updatePosition","timerID","setInterval","clearInterval","clearTimeout","recoverTimer","element","document","getElementById","velocity","style","backgroundColor","setTimeout","recover","setState","console","log","color","floatingAngel","convertTimeToX","left","top","duration","slope","complete","allSick","stopMovement","infect","value","equation","self","check","progress","elements","remaining","start","tweenValue","otherFunction","prevProps","reset","className","src","Angel","Mask","Transmit","widthOffset","clientWidth","heightOffset","clientHeight","parseFloat","update","width","height","transition","$el","$","css","transform","Plot","callbackFunction","childData","arrivedNodes","innerHTML","numOfNodes","shouldUpdate","justReset","nodes","passNodes","change","taco","infectionRate","numOfMeetings","meetings","i","done","nodeMeeting","interactionDuration","idNum","num","map","item","transmissions","checkCollision","RESET","updateComponents","iid","sum","untouched","recov","length","j","jid","healthyid","distance","ind","push","message","display","Create","generate","event","target","clicked","numPeople","isNaN","alert","assigned","numOfCreations","maskSet","addEventListener","App","placeholder","type","name","min","max","for","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.f65f54ef.chunk.js","sourcesContent":["import React from 'react';\nimport { tsParenthesizedType } from '@babel/types';\n\nclass Cough extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n        this.x = props.x;\n        \n        this.y = props.y;\n    }\n\n    componentDidMount() {\n        let element = document.getElementById('cough0');\n        \n        element.style.left = this.x + 'px';\n        element.style.top = this.y + 'px';\n        element.style.transition = '3s';\n\n        this.timerID = setTimeout(\n            () => this.updatePosition(),\n            50\n          );\n\n\n        \n    }\n\n    updatePosition(){\n        let element = document.getElementById('cough0');\n        element.style.width = '10px';\n        element.style.height = '10px';\n    }\n\n\n    render(){\n        return (\n        <div id = {'cough0'} className={\"cough\"}>\n\n        </div>\n        )\n    }\n}\n\nexport default Cough;","import React from 'react';\nimport Cough from './cough.js';\nimport Mask from './coronavirus.png';\nimport Angel from './angel.png';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\nimport { checkServerIdentity } from 'tls';\n\nclass Person extends React.Component{\n    constructor(props){\n        super(props)\n        \n        this.xGoal = this.props.meeting['x']  + 2 * Math.random() - 1;\n        this.yGoal = this.props.meeting['y'] + 2 * Math.random() - 1;\n        this.x = Math.floor(1+Math.random() * 98);\n        this.y = Math.floor(1+Math.random() * 98);\n        this.xStart = this.x;\n        this.yStart = this.y;\n        this.id = props.id;\n        this.social = props.social;\n        this.infected = props.infected;\n        this.masks = props.masks;\n        this.angel = false;\n        this.deathRate = 0.01;\n        \n        if (this.id == this.key + 'a0'){\n            this.infected = true;\n        }\n        this.state = {date: new Date()};\n        this.allNodes = props.allNodes;\n        this.arrived = false;\n        this.recovered = false;\n\n        this.first = true;\n        this.infex = false;\n\n        \n        this.time = 0;\n        this.percent = 0;\n        this.cough = false;\n        if (this.infected){\n            this.cough = true;\n        }\n\n        \n        this.totalDistance = this.xGoal - this.xStart;\n        \n    }\n\n    convertTimeToX(time){\n        let fractionTime = this.percent;\n        \n        //console.log(this.totalDistance + this.x)\n        let x = (this.totalDistance) * fractionTime + this.xStart;\n       \n        return x;\n    }\n\n    distance(x,y){\n        return Math.sqrt(Math.pow(this.xGoal - this.x,2) + Math.pow(this.yGoal - this.y, 2));\n    }\n\n    componentDidMount() {\n        \n        this.updatePosition();\n        this.timerID = setInterval(\n          () => this.updatePosition(),\n          50\n        );\n\n    }\n\n    componentWillUnmount(){\n        //console.log(this.id)\n        clearInterval(this.timerID);\n        clearTimeout(this.recoverTimer);\n    }\n\n    stopMovement(){\n        clearInterval(this.timerID);\n        let element = document.getElementById(this.id);\n        if (!this.angel){\n            element.velocity(\"stop\", true);\n        }\n        \n    }\n\n\n\n    \n\n    getX(){\n        return this.x;\n    }\n\n    infect() {\n        \n        this.infex = true;\n        let element = document.getElementById(this.id);\n        element.style.backgroundColor = 'red';\n        \n        this.recoverTimer = setTimeout(\n            () => this.recover(),\n            22500\n        );\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    recover(){\n        \n        if (this.recovered){\n            return;\n        }\n        console.log(this.id)\n        this.recovered = true;\n        let check = Math.random();\n        let color = '#f8ed62';\n        if (check <= this.deathRate){\n            this.angel = true;\n            color = 'white';\n            //this.stopMovement();\n            this.floatingAngel();\n        }\n        let element = document.getElementById(this.id);\n        element.style.backgroundColor = color;\n        this.setState({\n            date: new Date()\n        });\n    }\n\n\n    floatingAngel(){\n        this.yGoal = -200;\n        let element = document.getElementById(this.id);\n        this.arrived = true;\n        this.x = this.convertTimeToX(this.time);\n        this.sendData();\n        element.velocity(\"stop\", true);\n        element.velocity({\n            left: this.x + '%',\n            top: this.yGoal + '%'\n          \n\n        },\n        {duration: 12500\n           \n    \n        },\n\n        );\n    }\n    equation(x){\n        return this.slope(this.xStart,this.yStart) * (x - this.xStart) + this.yStart;\n    }\n\n    slope(x,y){\n        return ((this.yGoal - y)/(this.xGoal - x));\n    }\n\n    otherFunction(complete){\n        this.x = complete;\n    }\n\n   \n\n    \n    updatePosition(){\n        \n        if (this.allSick){\n            this.stopMovement();\n            if (this.infected && !this.recovered && !this.infex){\n\n                this.infect();\n            }\n\n            return;\n        }\n        this.social = document.getElementById(\"sd\").value/100;\n        this.time += 50;\n        //console.log(this.time)\n        \n        this.setState({\n            date: new Date()\n        });\n\n        if (this.arrived){\n            if (this.infected == true  && !this.recovered){\n                if (!this.infex){\n                    this.infect()\n                }\n            }\n            return;\n        }\n        else if (this.angel){\n            if (this.angel){\n                this.arrived = true;\n                this.sendData();\n                return;\n            }\n        }\n\n       this.x = this.convertTimeToX(this.time);\n       this.y = this.equation(this.x);\n\n        if (this.id == '1a0'){\n           // console.log(this.y);\n        }\n      \n        \n        if (this.infected && !this.recovered){\n            \n            if (this.infected == true  && !this.recovered){\n                if (!this.infex){\n                    this.infect()\n                }\n            }\n        }\n        \n        if (this.percent == 1){\n            this.x = this.xGoal;\n            this.y = this.yGoal;\n            this.arrived = true;\n\n            this.sendData();\n            \n            \n            //let element = document.getElementById(\"title\");\n            //element.innerHTML = this.id;\n            return;\n        }\n        else {\n            this.sendData();\n            \n        }\n        var self = this;\n        \n            if (this.first){\n               let check = Math.random();\n               if (this.id == 'a0'){\n                   //console.log(\"reset velocity\");\n               }\n               if (check < this.social){\n                   this.percent = 1;\n                   this.xGoal = this.x;\n                   this.yGoal = this.y;\n                   let element = document.getElementById(this.id);\n                element.style.left = this.x + \"%\";\n            \n\n                element.style.top = this.y + '%';\n                   return;\n               }\n           \n               \n                let element = document.getElementById(this.id);\n                \n                element.style.left = this.x + \"%\";\n                element.style.top = this.y + '%';\n\n                element.velocity({\n                    left: this.xGoal + '%',\n                    top: this.yGoal + '%'\n                  \n\n                },\n                {duration: 6500,\n                   \n                    progress: function(elements, complete, remaining, start, tweenValue) {\n                        otherFunction(self, complete);\n                        \n                    \n                    }\n                },\n\n                );\n\n                \n                 this.percent = 0;\n\n                 \n            }\n\n            \n        \n            function otherFunction(self, complete){\n                \n                self.percent = complete;\n                \n            }\n        \n\n        this.first =  false;\n        \n    }\n    \n    \n    sendData = () => {\n        let send = {};\n        send['id'] = this.id;\n        send['infected'] = this.infected;\n        send['x'] = this.x;\n        send['y'] = this.y;\n        send['arrived'] = this.arrived;\n        send['cough'] = {}\n        send['cough'].occur = true;\n        send['cough'].x = this.x;\n        send['cough'].y = this.x;\n        send['recovered'] = this.recovered;\n        \n        if (this.arrived){\n            \n            send['percent'] = this.percent;\n        }\n        \n        this.props.parentCallback(send);\n    };\n\n    \n\n    componentDidUpdate(prevProps) {\n        \n        \n        this.allSick = this.props.allSick;\n        \n        if (this.props.infected){\n           \n            this.infected = this.props.infected;\n            this.cough = true;\n            \n        }\n       \n        if (this.props.reset) {\n            \n            this.arrived = false;\n            this.first = true;\n            this.xGoal = this.props.meeting['x'] + 2 * Math.random() - 1;\n            this.yGoal = this.props.meeting['y'] + 2 * Math.random() - 1;\n            this.xStart = this.x;\n            this.yStart = this.y;\n            this.arrived = false;\n            this.percent = 0;\n            this.totalDistance = this.xGoal - this.xStart;\n        }\n    }\n\n    render() {\n        \n       \n        if (this.angel){\n            return (\n                <div id = {this.id} className = \"person\">\n                    <img className = 'angel' src = {Angel}></img>\n                </div>\n            )\n        }\n        if (this.masks){\n           \n            return (\n                <div id = {this.id} className = \"person\">\n                    <img src = {Mask}></img>\n                </div>\n            )\n        }\n        return (\n            <div id = {this.id} className = \"person\">\n                \n            </div>\n        )\n        \n    }\n\n\n}\n\nexport default Person;","import React from 'react';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\nimport * as $ from 'jquery';\n\nclass Transmit extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n        this.id = props.id;\n        let widthOffset = document.getElementById(\"graphArea\").clientWidth;\n        let heightOffset = document.getElementById(\"graphArea\").clientHeight;\n\n        console.log(parseFloat(props.x)/100)\n        this.x = parseFloat(props.x)/100 *parseFloat(widthOffset) + 10;\n        this.y = parseFloat(props.y)/100 *parseFloat(heightOffset) +10;\n        //console.log(this.x)\n      \n    }\n\n    componentDidMount() {\n        this.update();\n        \n\n       \n\n    }\n\n    update(){\n        \n        let element = document.getElementById(this.id);\n        element.style.left = this.x + \"px\";\n        element.style.top = this.y + 'px';\n        element.style.width = \"1px\";\n        element.style.height = \"1px\"\n        element.style.transition = '1.5s';\n\n        var $el = $(\"#\" + this.id);\n        \n        this.setState({\n            date: new Date()\n        });\n\n        this.timerID = setTimeout(\n            () => {$el.css({\n                transform: \"scale(\" + 5 + \")\",\n               \n\n              });\n                //element.style.width = \"40px\";\n            //element.style.height = \"40px\"\n        },\n            50\n          );\n\n      \n    }\n\n    render(){\n        return (\n            <div className={\"transmit\"} id = {this.id}></div>\n        )\n    }\n\n}\n\nexport default Transmit;","import React from 'react';\nimport Person from './person.js';\nimport Transmit from './transmit.js';\nimport { tsThisType } from '@babel/types';\n\nclass Plot extends React.Component {\n    constructor(props) {\n        super(props);\n        //initial values\n        this.justReset = false;\n        this.numOfNodes = props.numOfNodes;\n        this.nodes = []\n        this.passNodes = []\n        this.key = props.id;\n\n        \n        \n        //dict for information being sent back\n        this.allNodes = {}\n        this.reset = false;\n        this.change = false;\n        this.taco = 0;\n\n        if (props.masks){\n            this.infectionRate = 200;\n        } else {\n            this.infectionRate = 75;\n        }\n\n        this.social = document.getElementById(\"sd\").value/100;\n        //\n        this.arrivedNodes = 0;\n\n        //meeting locations\n        this.numOfMeetings = this.numOfNodes / 4;\n        this.meetings = [];\n        for (let i = 0; i < this.numOfMeetings; i ++){\n            \n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(2+Math.random() * 96);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n        this.done = false;\n\n        //stores the meeting spot for each specified node\n        this.nodeMeeting = {}\n        this.interactionDuration = {}\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let check = Math.random();\n            let idNum = this.key + 'a' + i;\n            this.nodes[i] =  idNum;\n            this.passNodes[i] = idNum;\n            let num = Math.floor(Math.random() * this.numOfMeetings);\n            \n                this.nodeMeeting[idNum] = this.meetings[num];\n                this.nodeMeeting[idNum].x += (1 * Math.random() - 0.5)\n                this.nodeMeeting[idNum].y += (1 * Math.random() - 0.5)\n                \n            \n            \n\n            this.allNodes[idNum] = {};\n            this.interactionDuration = {};\n            this.allNodes[idNum].infected = false;\n        }\n\n\n        //converting to component list with keys\n        this.nodes = this.nodes.map((item)=> {\n            \n            return (\n                <Person  allSick = {false} masks = {props.masks} infected = {false} social = {this.social} recovered = {false} reset = {false} id={item} meeting={this.nodeMeeting[item]} parentCallback = {this.callbackFunction} key={item}/>\n            )\n        })\n       \n        \n        //infecting one of them\n        this.nodes[0] = <Person allSick = {false} masks = {props.masks} infected = {true} social = {this.social} id={this.key + 'a0'} recovered = {false} reset = {false} meeting={this.nodeMeeting[this.key + 'a0']} parentCallback = {this.callbackFunction} key={this.key + 'a0'}/>\n        this.state = {nodes: this.nodes};\n       \n\n        //transmission graphics\n        this.transmissions = [];\n    }\n\n    componentDidMount() {\n        //this.updatePosition();\n        \n        this.timerID = setInterval(\n          () => this.update(),\n          50\n        );\n        \n    }\n    componentDidUpdate(prevProps) {\n        this.allSick = this.props.allSick;\n    }\n\n    \n    //function for checking if state of people need to be updated\n    update(){\n        //should update is set to false\n        this.shouldUpdate = false;\n        this.done = false;\n\n        //if everything had just been reset, want to update\n        if (this.justReset){\n            this.shouldUpdate = true;\n            this.justReset = false;\n        }\n\n        //checks for infections\n        this.checkCollision();\n       \n        //checks if every node has made it to meetings\n        //this.updateMeetings();\n        //if so, it changes meeting spots and makes the nodes move again\n        if (this.reset){\n            this.RESET();\n            this.shouldUpdate = true;\n        }\n\n        //sets state to render everything\n        //updates Components then renders them\n        if (this.shouldUpdate){\n            this.updateComponents();\n            this.setState({nodes: this.nodes});\n            if (this.reset){\n                this.reset = false;\n                this.justReset = true;\n            }\n            \n        }\n        \n    }\n\n\n    //updates Components with most recent data of all people\n    updateComponents(){\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let iid = this.key + 'a' + i;\n            this.nodes[i] = <Person allSick = {this.allSick} infected = {this.allNodes[iid].infected} recovered = {this.allNodes[iid].recovered} reset = {this.reset} id={iid} meeting={this.nodeMeeting[iid]} parentCallback = {this.callbackFunction} key={iid}/>\n        }\n        this.shouldUpdate = false;\n    }\n\n    hardcode(){\n        this.reset = false;\n    }\n\n\n    //distance between two people\n    distance(x,y){\n        return Math.sqrt(Math.pow(this.allNodes[x].x - this.allNodes[y].x,2) + Math.pow(this.allNodes[x].y - this.allNodes[y].y, 2));\n    }\n    \n\n    //funciton to return data from people\n    callbackFunction = (childData) => {\n        //if id of person already stored, but newly arrived, increment\n       // if (childData.id in this.allNodes && childData.arrived){\n            //if (!this.allNodes[childData.id].arrived && childData.arrived){\n         //       this.arrivedNodes = this.arrivedNodes + 1;\n            //}\n        //}\n        //else if not saved data but the person has arrived, increment\n        //else if (childData.arrived){\n          \n          //  this.arrivedNodes = this.arrivedNodes + 1;\n       // }\n        \n        if ('percent' in childData){\n            \n            this.arrivedNodes = this.arrivedNodes + 1;\n        }\n        \n        //saved most recent data\n        this.allNodes[childData.id] = childData;\n        let element = document.getElementById(\"title\");\n        element.innerHTML = this.arrivedNodes;\n        \n        //if all arrived, must reset\n        if (this.arrivedNodes == (this.numOfNodes)){\n            this.reset = true;\n            this.arrivedNodes = 0;\n            this.shouldUpdate = true;\n           \n        }\n\n        this.allSick = false;\n        \n    };\n    \n    checkCollision(){\n        let sum = 0; let untouched = 0; let recov = 0;\n       \n        for (let i = 0; i < this.nodes.length; i ++){\n            for (let j = 0; j < this.nodes.length; j ++){\n                let iid = this.passNodes[i];\n                let jid = this.passNodes[j];\n                \n                if (this.allNodes[iid].recovered || this.allNodes[jid].recovered || i == j || (this.allNodes[iid].infected && this.allNodes[jid].infected)){\n                    \n                    continue;\n                }\n                \n                if (!this.allNodes[iid].infected && !this.allNodes[jid].infected){\n                    \n                    continue;\n                }\n                \n                let healthyid = iid;\n                if (!this.allNodes[jid].infected){\n                    healthyid = jid;\n                }\n                \n                if (iid == 'a1'){\n                   //console.log(this.allNodes[iid].x);\n                }\n                \n                if (this.distance(iid,jid) < 2.5){\n                    \n                    this.interactionDuration[healthyid] += 1;\n                    let check = Math.random();\n                    if (check < (this.interactionDuration[healthyid]/this.infectionRate)){\n                        \n                        this.allNodes[healthyid].infected = true;\n                            //this.allNodes[jid].infected = true;\n                            this.shouldUpdate = true;\n\n                        let ind = this.transmissions.length;\n                        this.transmissions.push(<Transmit key = {\"tm\" + healthyid} id = {\"tm\" + healthyid} x={this.allNodes[healthyid].x} y={this.allNodes[healthyid].y}/>);\n                        setTimeout(() => {\n                            delete this.transmissions[ind];\n                            this.setState({nodes: this.nodes});\n                            \n                        }, 1500);\n                    }\n                } \n                else {\n                    this.interactionDuration[healthyid] = 0;\n                }\n                \n                /* if (i != j){\n                    if ((this.allNodes[iid].infected || this.allNodes[jid].infected) && !(this.allNodes[iid].infected && this.allNodes[jid].infected)){\n                        let check = Math.random();\n                        \n                        if (check < this.infectionRate && this.distance(iid,jid) < 2.5){\n                            //if it makes one sick, it want to update it\n                            this.allNodes[iid].infected = true;\n                            this.allNodes[jid].infected = true;\n                            this.shouldUpdate = true;\n                        }\n                    }\n                    \n                } */\n            }\n            if (!this.allNodes[this.passNodes[i]].infected && !this.allNodes[this.passNodes[i]].recovered){\n                untouched = untouched + 1;\n            }\n            if (this.allNodes[this.passNodes[i]].infected && !this.allNodes[this.passNodes[i]].recovered) {\n                sum = sum + 1;\n            }\n            if (this.allNodes[this.passNodes[i]].recovered){\n                recov = recov + 1;\n            }\n        }\n\n        if (sum == this.numOfNodes || untouched == 0 || (untouched + recov == this.numOfNodes)){\n            this.allSick = true;\n            this.message = \"Immunity Reached. No one else to spread disease to.\"\n        }\n        \n    }\n\n    updateMeetings(){\n        for (let i = 0; i < this.nodes.length; i ++){\n            let iid = this.passNodes[i];\n            if (!this.allNodes[iid].arrived){\n                \n                for (let j = 0; j < this.nodes.length; j ++){\n                    let jid = this.passNodes[j];\n                    \n                    //this.nodes[j] = <Person infected = {false} reset = {false} id={jid} meeting={this.nodeMeeting[jid]} parentCallback = {this.callbackFunction} key={jid}/>\n                }\n                return;\n            }\n        }\n\n        for (let i = 0; i < this.numOfMeetings; i ++){\n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(2+Math.random() * 96);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n       \n            for (let i = 0; i < this.nodes.length; i ++){\n                let iid = this.passNodes[i];\n                this.allNodes[iid].arrived = false;\n            }\n         \n\n        this.reset = true;\n    }\n\n    RESET() {\n        this.nodeMeeting = {}\n        //this.nodes = []\n        \n        for (let i = 0; i < this.numOfMeetings; i ++){\n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(1+Math.random() * 98);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let idNum =  this.key + 'a' + i;\n            this.passNodes[i] = idNum;\n            let num = Math.floor(Math.random() * this.numOfMeetings);\n            this.nodeMeeting[idNum] = this.meetings[num];\n            \n            \n            \n            \n            \n            \n           \n            //this.nodes[i] = <Person infected = {this.allNodes[iid].infected} reset = {true} id={iid} meeting={this.nodeMeeting[iid]} parentCallback = {this.callbackFunction} key={iid}/>                        \n\n            \n            \n            //this.setState({nodes: this.nodes});\n        }\n       \n        \n        //this.setState({nodes: this.nodes});\n        \n        \n\n        \n        \n\n        \n    }\n\n\n    render (){\n        //this.nodeMeeting = {}\n        \n        let pp;\n        \n        if (this.taco >= 2 && !this.reset) {\n            for (let i = 0; i < this.numOfNodes; i ++){\n                let idNum = 'a' + i;\n                let check = Math.random();\n                \n                //this.nodes[i] = <Person infected = {this.allNodes[idNum].infected} reset = {false} id={idNum} key={idNum} parentCallback = {this.callbackFunction}/>\n\n              \n              \n\n                \n                \n            }\n        }\n        this.taco = this.taco + 1;  \n        \n        if (this.change){\n            this.change = false;\n            \n            for (let i = 0; i < this.numOfNodes; i ++){\n                let idNum = 'a' + i;\n                //this.nodes[i] = <Person infected = {this.allNodes[idNum].infected} reset = {false} id={idNum} key={idNum} parentCallback = {this.callbackFunction}/>\n            }\n        } \n        \n        if (this.reset){\n            \n            this.change = true;\n        }\n\n       \n        \n        if (this.allSick){\n            clearInterval(this.timerID);\n            document.getElementById(\"overshadow\").style.display = 'block';\n            return (\n            \n           \n            <>  \n                {this.allSick && <div id = {\"endmsg\"}>{this.message}</div>}\n                <div>\n                \n                    <div>{this.state.nodes}</div>\n                    \n                    <div>{this.transmissions}</div>\n                </div>\n            </>\n            \n            )\n        }\n        \n        return ( \n            <>\n            {this.allSick && <div id = {\"endmsg\"}>{this.message}</div>}\n            <div>\n                <div>{this.state.nodes}</div>\n                \n                <div>{this.transmissions}</div>\n            </div>\n            </>\n           \n        )\n    }\n}\n\nexport default Plot;","import Plot from './plot.js';\nimport React from 'react';\n\n\nclass Create extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = ({numOfCreations: 0});\n        this.numOfCreations = 0;\n        this.assigned = false;\n        this.clicked = false;\n        this.masks = false;\n        //this.numPeople = document.getElementById('numPeople').value;\n    }\n\n    componentDidMount() {\n        \n        this.assigned = false;\n        let btn = document.getElementById(\"GenerateSimulation\");\n        //this.numPeople = document.getElementById('numPeople').value;\n        let self = this;\n        document.addEventListener('click', this.generate);\n        \n       \n        //btn.onClick = this.generate();\n    }\n\n    generate = event =>{\n        if (event.target.id == 'masks'){\n            this.maskSet();\n            return;\n        }\n        if (event.target.id == 'ResetSimulation'){\n            this.reset();\n            \n            return;\n        }\n\n        if (event.target.id != 'GenerateSimulation' || this.clicked){\n            return;\n        }\n        \n        this.allSick = false;\n        this.clicked = true;\n\n\n        \n\n\n        this.numPeople = document.getElementById('numPeople').value;\n     \n        if (isNaN(this.numPeople)){\n            alert(\"Please enter number of people for simulation\");\n            return;\n        }\n        this.assigned = true;\n        this.numOfCreations ++;\n        this.setState({numOfCreations: this.numOfCreations});\n    }\n\n    maskSet(){\n        if (this.masks){\n            document.getElementById(\"masks\").style.backgroundColor = \"white\";\n        }\n        else {\n            document.getElementById(\"masks\").style.backgroundColor = \"blue\";\n        }\n        this.masks = !this.masks;\n        \n    }\n    reset(){\n        this.clicked = false;\n        this.assigned = false;\n        document.getElementById(\"overshadow\").style.display = 'none';\n        this.allSick = true;\n        this.setState({numOfCreations: this.numOfCreations});\n    }\n\n    callbackFunction = (childData) => {\n        this.numOfCreations = this.numOfCreations + 1;\n    }\n\n\n    render(){\n        if (this.allSick){\n            console.log(\"should cancel all\")    \n        }\n\n        if (!this.assigned){\n            \n            return <div id = \"graphArea\"></div>;\n        }\n       \n        console.log(this.masks)\n        return (\n            \n        <div id = \"graphArea\">\n          <Plot allSick = {this.allSick} callbackFunction = {this.callbackFunction} id = {this.numOfCreations} key = {this.numOfCreations} numOfNodes = {this.numPeople} masks = {this.masks} />\n        </div>\n        )\n    }\n\n}\n\nexport default Create;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './person.js';\nimport Plot from './plot.js';\nimport Create from './create.js';\n\nfunction App() {\n  \n  \n  \n  return (\n    <><div id = \"overshadow\"></div>\n      <div className=\"App\">\n        <div id = \"title\">\n          Covid Visualizer\n        </div>\n\n        <div id = \"topBox\">\n          <div id = \"inputs\">\n            <div id = \"people\" className=\"input\">\n              <input id = \"numPeople\" placeholder=\"100\"></input>\n              <label>Number of People</label>\n            </div>\n            \n            <div id = \"socialDistance\" className=\"input\">\n              <input type=\"range\" placeholder=\"Social Distancing\" id =\"sd\" name=\"cowbell\" min=\"0\" max=\"100\"></input>\n              <label for=\"cowbell\">Level of Social Distancing</label>\n            </div>\n            \n\n            <div id = \"maskBox\" className=\"input\">\n              <div name = \"m\" id = {\"masks\"}></div>\n              <label for=\"m\">Masks</label>\n            </div>\n            \n          </div>\n\n          <div id = \"generate\">\n              <button id=\"GenerateSimulation\">Generate Simulation</button>\n          </div>\n          <div id = \"reset\">\n              <button id=\"ResetSimulation\">Reset Simulation</button>\n          </div>\n        </div>\n        \n        <Create />\n\n        <div id = \"bottomBorder\">\n          <div id = \"negativeCovid\">\n            Negative\n          </div>\n\n          <div id = \"positiveCovid\">\n            Positive\n          </div>\n\n          <div id = \"recoveredCovid\">\n            Recovered\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/coronavirus.a625a7c2.png\";","module.exports = __webpack_public_path__ + \"static/media/angel.db2b3117.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}