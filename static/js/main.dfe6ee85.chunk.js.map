{"version":3,"sources":["cough.js","person.js","transmit.js","plot.js","create.js","App.js","serviceWorker.js","index.js","coronavirus.png","logo.svg"],"names":["React","Component","Person","props","sendData","send","id","infected","x","y","arrived","occur","recovered","percent","parentCallback","xGoal","meeting","Math","random","yGoal","floor","xStart","yStart","social","masks","state","date","Date","allNodes","first","time","cough","totalDistance","abs","fractionTime","this","sqrt","pow","updatePosition","timerID","setInterval","document","getElementById","style","backgroundColor","recoverTimer","setTimeout","recover","slope","complete","value","setState","infect","convertTimeToX","equation","self","element","left","top","velocity","duration","progress","elements","remaining","start","tweenValue","otherFunction","prevProps","reset","className","src","Mask","Transmit","console","log","update","width","height","transition","Plot","callbackFunction","childData","arrivedNodes","innerHTML","numOfNodes","shouldUpdate","allSick","justReset","nodes","passNodes","change","taco","infectionRate","numOfMeetings","meetings","i","done","nodeMeeting","interactionDuration","idNum","num","map","item","key","transmissions","checkCollision","RESET","updateComponents","iid","sum","length","j","jid","healthyid","distance","ind","push","Create","generate","event","target","checked","numPeople","isNaN","alert","assigned","numOfCreations","addEventListener","App","placeholder","type","name","min","max","for","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.dfe6ee85.chunk.js","sourcesContent":["import React from 'react';\nimport { tsParenthesizedType } from '@babel/types';\n\nclass Cough extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n        this.x = props.x;\n        \n        this.y = props.y;\n    }\n\n    componentDidMount() {\n        let element = document.getElementById('cough0');\n        \n        element.style.left = this.x + 'px';\n        element.style.top = this.y + 'px';\n        element.style.transition = '3s';\n\n        this.timerID = setTimeout(\n            () => this.updatePosition(),\n            50\n          );\n\n\n        \n    }\n\n    updatePosition(){\n        let element = document.getElementById('cough0');\n        element.style.width = '10px';\n        element.style.height = '10px';\n    }\n\n\n    render(){\n        return (\n        <div id = {'cough0'} className={\"cough\"}>\n\n        </div>\n        )\n    }\n}\n\nexport default Cough;","import React from 'react';\nimport Cough from './cough.js';\nimport Mask from './coronavirus.png';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\nimport { checkServerIdentity } from 'tls';\n\nclass Person extends React.Component{\n    constructor(props){\n        super(props)\n        this.xGoal = this.props.meeting['x']  + 2 * Math.random() - 1;\n        this.yGoal = this.props.meeting['y'] + 2 * Math.random() - 1;\n        this.x = Math.floor(1+Math.random() * 98);\n        this.y = Math.floor(1+Math.random() * 98);\n        this.xStart = this.x;\n        this.yStart = this.y;\n        this.id = props.id;\n        this.social = props.social;\n        this.infected = props.infected;\n        this.masks = props.masks;\n        \n        if (this.id == 'a0'){\n            this.infected = true;\n        }\n        this.state = {date: new Date()};\n        this.allNodes = props.allNodes;\n        this.arrived = false;\n        this.recovered = false;\n\n        this.first = true;\n        \n\n        \n        this.time = 0;\n        this.percent = 0;\n        this.cough = false;\n        if (this.infected){\n            this.cough = true;\n        }\n\n        \n        this.totalDistance = Math.abs(this.xGoal - this.xStart);\n        \n    }\n\n    convertTimeToX(time){\n        let fractionTime = this.percent;\n        \n        //console.log(this.totalDistance + this.x)\n        let x = (this.totalDistance) * fractionTime + this.xStart;\n       \n        return x;\n    }\n\n    distance(x,y){\n        return Math.sqrt(Math.pow(this.xGoal - this.x,2) + Math.pow(this.yGoal - this.y, 2));\n    }\n\n    componentDidMount() {\n        this.updatePosition();\n        this.timerID = setInterval(\n          () => this.updatePosition(),\n          50\n        );\n\n    }\n\n    \n\n    getX(){\n        return this.x;\n    }\n\n    infect() {\n        let element = document.getElementById(this.id);\n        element.style.backgroundColor = 'red';\n        this.recoverTimer = setTimeout(\n            () => this.recover(),\n            22500\n        );\n    }\n\n    recover(){\n        let element = document.getElementById(this.id);\n        element.style.backgroundColor = '#f8ed62';\n        this.recovered = true;\n    }\n\n    equation(x){\n        return this.slope(this.xStart,this.yStart) * (x - this.xStart) + this.yStart;\n    }\n\n    slope(x,y){\n        return ((this.yGoal - y)/(this.xGoal - x));\n    }\n\n    otherFunction(complete){\n        \n        this.x = complete;\n    }\n\n   \n\n    \n    updatePosition(){\n        this.social = document.getElementById(\"sd\").value/100;\n        this.time += 50;\n        //console.log(this.time)\n        \n        this.setState({\n            date: new Date()\n        });\n\n        if (this.arrived){\n            if (this.infected == true  && !this.recovered){\n                if (document.getElementById(this.id).backgroundColor != 'red'){\n                    this.infect()\n                }\n            }\n            return;\n        }\n\n       this.x = this.convertTimeToX(this.time);\n       this.y = this.equation(this.x);\n\n      \n\n        \n        if (this.infected == true  && !this.recovered){\n            if (document.getElementById(this.id).backgroundColor != 'red'){\n                this.infect()\n            }\n        }\n        \n        if (this.percent == 1){\n            this.x = this.xGoal;\n            this.y = this.yGoal;\n            this.arrived = true;\n\n            this.sendData();\n            this.totalDistance = Math.abs(this.xGoal - this.xStart);\n            //let element = document.getElementById(\"title\");\n            //element.innerHTML = this.id;\n            return;\n        }\n        else {\n            this.sendData();\n        }\n        var self = this;\n        \n            if (this.first){\n               let check = Math.random();\n               if (check < this.social){\n                   this.percent = 1;\n                   this.xGoal = this.x;\n                   this.yGoal = this.y;\n                   let element = document.getElementById(this.id);\n                element.style.left = this.x + \"%\";\n            \n\n                element.style.top = this.y + '%';\n                   return;\n               }\n           \n\n                let element = document.getElementById(this.id);\n\n                element.style.left = this.x + \"%\";\n                element.style.top = this.y + '%';\n\n                element.velocity({\n                    left: this.xGoal + '%',\n                    top: this.yGoal + '%'\n                  \n\n                },\n                {duration: 6500,\n                   \n                    progress: function(elements, complete, remaining, start, tweenValue) {\n                        otherFunction(self, complete);\n                        \n                    \n                    }\n                },\n\n                );\n\n                \n                 this.time = 0;\n\n                 \n            }\n\n            \n        \n            function otherFunction(self, complete){\n                \n                self.percent = complete;\n                \n            }\n        \n\n        this.first =  false;\n        \n    }\n    \n    \n    sendData = () => {\n        let send = {};\n        send['id'] = this.id;\n        send['infected'] = this.infected;\n        send['x'] = this.x;\n        send['y'] = this.y;\n        send['arrived'] = this.arrived;\n        send['cough'] = {}\n        send['cough'].occur = true;\n        send['cough'].x = this.x;\n        send['cough'].y = this.x;\n        send['recovered'] = this.recovered;\n        if (this.arrived){\n            \n            send['percent'] = this.percent;\n        }\n        \n        this.props.parentCallback(send);\n    };\n\n    \n\n    componentDidUpdate(prevProps) {\n        \n        \n        //this.recovered = this.props.recovered;\n        if (this.props.infected && !this.infected){\n            this.infected = this.props.infected;\n            this.cough = true;\n            \n        }\n       \n        if (this.props.reset) {\n            \n            this.arrived = false;\n            this.first = true;\n            this.xGoal = this.props.meeting['x'] + 2 * Math.random() - 1;\n            this.yGoal = this.props.meeting['y'] + 2 * Math.random() - 1;\n            this.xStart = this.x;\n            this.yStart = this.y;\n            this.arrived = false;\n            this.percent = 0;\n            \n        }\n    }\n\n    render() {\n        \n       \n       \n        if (this.masks){\n           \n            return (\n                <div id = {this.id} className = \"person\">\n                    <img src = {Mask}></img>\n                </div>\n            )\n        }\n        return (\n            <div id = {this.id} className = \"person\">\n                \n            </div>\n        )\n        \n    }\n\n\n}\n\nexport default Person;","import React from 'react';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\n\nclass Transmit extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n        this.id = props.id;\n        this.x = props.x;\n        this.y = props.y;\n        console.log(\"aqui\")\n    }\n\n    componentDidMount() {\n        this.update();\n        \n\n       \n\n    }\n\n    update(){\n        let element = document.getElementById(this.id);\n        element.style.left = this.x + \"%\";\n        element.style.top = this.y + '%';\n        element.style.width = \"0px\";\n        element.style.height = \"0px\"\n        element.style.transition = '1.5s';\n        \n        this.setState({\n            date: new Date()\n        });\n\n        this.timerID = setTimeout(\n            () => {element.style.width = \"40px\";\n            element.style.height = \"40px\"},\n            50\n          );\n    }\n\n    render(){\n        return (\n            <div className={\"transmit\"} id = {this.id}></div>\n        )\n    }\n\n}\n\nexport default Transmit;","import React from 'react';\nimport Person from './person.js';\nimport Transmit from './transmit.js';\nimport { tsThisType } from '@babel/types';\n\nclass Plot extends React.Component {\n    constructor(props) {\n        super(props);\n        //initial values\n        this.justReset = false;\n        this.numOfNodes = props.numOfNodes;\n        this.nodes = []\n        this.passNodes = []\n\n        \n        \n        //dict for information being sent back\n        this.allNodes = {}\n        this.reset = false;\n        this.change = false;\n        this.taco = 0;\n\n        if (props.masks){\n            this.infectionRate = 100;\n        } else {\n            this.infectionRate = 25;\n        }\n\n        this.social = document.getElementById(\"sd\").value/100;\n        //\n        this.arrivedNodes = 0;\n\n        //meeting locations\n        this.numOfMeetings = this.numOfNodes / 4;\n        this.meetings = [];\n        for (let i = 0; i < this.numOfMeetings; i ++){\n            \n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(2+Math.random() * 96);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n        this.done = false;\n\n        //stores the meeting spot for each specified node\n        this.nodeMeeting = {}\n        this.interactionDuration = {}\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let check = Math.random();\n            let idNum = 'a' + i;\n            this.nodes[i] =  idNum;\n            this.passNodes[i] = idNum;\n            let num = Math.floor(Math.random() * this.numOfMeetings);\n            \n                this.nodeMeeting[idNum] = this.meetings[num];\n                this.nodeMeeting[idNum].x += (1 * Math.random() - 0.5)\n                this.nodeMeeting[idNum].y += (1 * Math.random() - 0.5)\n                \n            \n            \n\n            this.allNodes[idNum] = {};\n            this.interactionDuration = {};\n            this.allNodes[idNum].infected = false;\n        }\n\n\n        //converting to component list with keys\n        this.nodes = this.nodes.map((item)=> {\n            \n            return (\n                <Person  masks = {props.masks} infected = {false} social = {this.social} recovered = {false} reset = {false} id={item} meeting={this.nodeMeeting[item]} parentCallback = {this.callbackFunction} key={item}/>\n            )\n        })\n        \n        //infecting one of them\n        this.nodes[0] = <Person masks = {props.masks} infected = {true} social = {this.social} id={'a0'} recovered = {false} reset = {false} meeting={this.nodeMeeting['a0']} parentCallback = {this.callbackFunction} key={'a0'}/>\n        this.state = {nodes: this.nodes};\n\n\n        //transmission graphics\n        this.transmissions = [];\n    }\n\n    componentDidMount() {\n        //this.updatePosition();\n        \n        this.timerID = setInterval(\n          () => this.update(),\n          50\n        );\n        \n    }\n\n    \n    //function for checking if state of people need to be updated\n    update(){\n        //should update is set to false\n        this.shouldUpdate = false;\n        this.done = false;\n\n        //if everything had just been reset, want to update\n        if (this.justReset){\n            this.shouldUpdate = true;\n            this.justReset = false;\n        }\n\n        //checks for infections\n        this.checkCollision();\n       \n        //checks if every node has made it to meetings\n        //this.updateMeetings();\n        //if so, it changes meeting spots and makes the nodes move again\n        if (this.reset){\n            this.RESET();\n            this.shouldUpdate = true;\n        }\n\n        //sets state to render everything\n        //updates Components then renders them\n        if (this.shouldUpdate){\n            this.updateComponents();\n            this.setState({nodes: this.nodes});\n            if (this.reset){\n                this.reset = false;\n                this.justReset = true;\n            }\n            \n        }\n        \n    }\n\n\n    //updates Components with most recent data of all people\n    updateComponents(){\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let iid = 'a' + i;\n            this.nodes[i] = <Person infected = {this.allNodes[iid].infected} recovered = {this.allNodes[iid].recovered} reset = {this.reset} id={iid} meeting={this.nodeMeeting[iid]} parentCallback = {this.callbackFunction} key={iid}/>\n        }\n        this.shouldUpdate = false;\n    }\n\n    hardcode(){\n        this.reset = false;\n    }\n\n\n    //distance between two people\n    distance(x,y){\n        return Math.sqrt(Math.pow(this.allNodes[x].x - this.allNodes[y].x,2) + Math.pow(this.allNodes[x].y - this.allNodes[y].y, 2));\n    }\n    \n\n    //funciton to return data from people\n    callbackFunction = (childData) => {\n        //if id of person already stored, but newly arrived, increment\n       // if (childData.id in this.allNodes && childData.arrived){\n            //if (!this.allNodes[childData.id].arrived && childData.arrived){\n         //       this.arrivedNodes = this.arrivedNodes + 1;\n            //}\n        //}\n        //else if not saved data but the person has arrived, increment\n        //else if (childData.arrived){\n          \n          //  this.arrivedNodes = this.arrivedNodes + 1;\n       // }\n\n        if ('percent' in childData){\n            console.log(this.arrivedNodes)\n            this.arrivedNodes = this.arrivedNodes + 1;\n        }\n\n        //saved most recent data\n        this.allNodes[childData.id] = childData;\n        let element = document.getElementById(\"title\");\n        element.innerHTML = this.arrivedNodes;\n\n        //if all arrived, must reset\n        if (this.arrivedNodes == (this.numOfNodes)){\n            this.reset = true;\n            this.arrivedNodes = 0;\n            this.shouldUpdate = true;\n           \n        }\n\n        this.allSick = false;\n        \n    };\n    \n    checkCollision(){\n        let sum = 0;\n       \n        for (let i = 0; i < this.nodes.length; i ++){\n            for (let j = 0; j < this.nodes.length; j ++){\n                let iid = this.passNodes[i];\n                let jid = this.passNodes[j];\n                \n                if (this.allNodes[iid].recovered || this.allNodes[jid].recovered || i == j || (this.allNodes[iid].infected && this.allNodes[jid].infected)){\n                    continue;\n                }\n\n                if (!this.allNodes[iid].infected && !this.allNodes[jid].infected){\n                    continue;\n                }\n\n                let healthyid = iid;\n                if (!this.allNodes[jid].infected){\n                    healthyid = jid;\n                }\n                \n                if (iid == 'a1'){\n                   //console.log(this.allNodes[iid].x);\n                }\n                if (this.distance(iid,jid) < 2.5){\n                    \n                    this.interactionDuration[healthyid] += 1;\n                    let check = Math.random();\n                    if (check < (this.interactionDuration[healthyid]/this.infectionRate)){\n                        console.log(\"sick\")\n                        this.allNodes[healthyid].infected = true;\n                            //this.allNodes[jid].infected = true;\n                            this.shouldUpdate = true;\n\n                        let ind = this.transmissions.length;\n                        this.transmissions.push(<Transmit key = {\"tm\" + healthyid} id = {\"tm\" + healthyid} x={this.allNodes[healthyid].x} y={this.allNodes[healthyid].y}/>);\n                        setTimeout(() => {\n                            delete this.transmissions[ind];\n                            this.setState({nodes: this.nodes});\n                            console.log(\"Fade\");\n                        }, 1500);\n                    }\n                } \n                else {\n                    this.interactionDuration[healthyid] = 0;\n                }\n                \n                /* if (i != j){\n                    if ((this.allNodes[iid].infected || this.allNodes[jid].infected) && !(this.allNodes[iid].infected && this.allNodes[jid].infected)){\n                        let check = Math.random();\n                        \n                        if (check < this.infectionRate && this.distance(iid,jid) < 2.5){\n                            //if it makes one sick, it want to update it\n                            this.allNodes[iid].infected = true;\n                            this.allNodes[jid].infected = true;\n                            this.shouldUpdate = true;\n                        }\n                    }\n                    \n                } */\n            }\n            if (this.allNodes[this.passNodes[i]].infected) {\n                sum = sum + 1;\n            }\n        }\n\n        if (sum == this.numOfNodes){\n            this.allSick = true;\n        }\n        \n    }\n\n    updateMeetings(){\n        for (let i = 0; i < this.nodes.length; i ++){\n            let iid = this.passNodes[i];\n            if (!this.allNodes[iid].arrived){\n                \n                for (let j = 0; j < this.nodes.length; j ++){\n                    let jid = this.passNodes[j];\n                    \n                    //this.nodes[j] = <Person infected = {false} reset = {false} id={jid} meeting={this.nodeMeeting[jid]} parentCallback = {this.callbackFunction} key={jid}/>\n                }\n                return;\n            }\n        }\n\n        for (let i = 0; i < this.numOfMeetings; i ++){\n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(2+Math.random() * 96);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n       \n            for (let i = 0; i < this.nodes.length; i ++){\n                let iid = this.passNodes[i];\n                this.allNodes[iid].arrived = false;\n            }\n         \n\n        this.reset = true;\n    }\n\n    RESET() {\n        this.nodeMeeting = {}\n        //this.nodes = []\n        \n        for (let i = 0; i < this.numOfMeetings; i ++){\n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(1+Math.random() * 98);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let idNum = 'a' + i;\n            this.passNodes[i] = idNum;\n            let num = Math.floor(Math.random() * this.numOfMeetings);\n            this.nodeMeeting[idNum] = this.meetings[num];\n            \n            \n            \n            \n            \n            \n           \n            //this.nodes[i] = <Person infected = {this.allNodes[iid].infected} reset = {true} id={iid} meeting={this.nodeMeeting[iid]} parentCallback = {this.callbackFunction} key={iid}/>                        \n\n            \n            \n            //this.setState({nodes: this.nodes});\n        }\n        console.log(this.nodeMeeting)\n        \n        //this.setState({nodes: this.nodes});\n        \n        \n\n        \n        \n\n        \n    }\n\n\n    render (){\n        //this.nodeMeeting = {}\n        \n        let pp;\n        \n        if (this.taco >= 2 && !this.reset) {\n            for (let i = 0; i < this.numOfNodes; i ++){\n                let idNum = 'a' + i;\n                let check = Math.random();\n                \n                //this.nodes[i] = <Person infected = {this.allNodes[idNum].infected} reset = {false} id={idNum} key={idNum} parentCallback = {this.callbackFunction}/>\n\n              \n              \n\n                \n                \n            }\n        }\n        this.taco = this.taco + 1;  \n        \n        if (this.change){\n            this.change = false;\n            \n            for (let i = 0; i < this.numOfNodes; i ++){\n                let idNum = 'a' + i;\n                //this.nodes[i] = <Person infected = {this.allNodes[idNum].infected} reset = {false} id={idNum} key={idNum} parentCallback = {this.callbackFunction}/>\n            }\n        } \n        \n        if (this.reset){\n            \n            this.change = true;\n        }\n\n       \n        console.log(this.state.nodes)\n        console.log(this.transmissions)\n        if (this.allSick){\n            return (<div>\n                All Sick\n            </div>)\n        }\n        return ( \n            <div>\n                <div>{this.state.nodes}</div>\n                \n                <div>{this.transmissions}</div>\n            </div>\n           \n        )\n    }\n}\n\nexport default Plot;","import Plot from './plot.js';\nimport React from 'react';\n\n\nclass Create extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = ({numOfCreations: 0});\n        this.numOfCreations = 0;\n        this.assigned = false;\n        \n        //this.numPeople = document.getElementById('numPeople').value;\n    }\n\n    componentDidMount() {\n        \n        this.assigned = false;\n        let btn = document.getElementById(\"GenerateSimulation\");\n        //this.numPeople = document.getElementById('numPeople').value;\n        let self = this;\n        document.addEventListener('click', this.generate);\n\n       \n        //btn.onClick = this.generate();\n    }\n\n    generate = event =>{\n        \n        if (event.target.id != 'GenerateSimulation'){\n            return;\n        }\n\n        this.masks = document.getElementById(\"masks\").checked;\n       \n        if (this.masks){\n           \n            this.masks = true;\n        }\n        else {\n            this.masks = false;\n        }\n\n\n        this.numPeople = document.getElementById('numPeople').value;\n     \n        if (isNaN(this.numPeople)){\n            alert(\"Please enter number of people for simulation\");\n            return;\n        }\n        this.assigned = true;\n        this.numOfCreations ++;\n        this.setState({numOfCreations: this.numOfCreations});\n    }\n\n\n    render(){\n        if (!this.assigned){\n            return <div id = \"graphArea\"></div>;\n        }\n       \n\n        return (\n        <div id = \"graphArea\">\n          <Plot key = {this.numOfCreations} numOfNodes = {this.numPeople} masks = {this.masks} />\n        </div>\n        )\n    }\n\n}\n\nexport default Create;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './person.js';\nimport Plot from './plot.js';\nimport Create from './create.js';\n\nfunction App() {\n  \n  \n  \n  return (\n    <>\n      <div className=\"App\">\n        <div id = \"title\">\n          Covid Visualizer\n        </div>\n        \n        <div id = \"topBox\">\n          <div id = \"inputs\">\n            <div id = \"people\">\n              <input id = \"numPeople\" placeholder=\"Number of people\"></input>\n            </div>\n            \n            <div id = \"socialDistance\">\n              <input type=\"range\" placeholder=\"Social Distancing\" id =\"sd\" name=\"cowbell\" min=\"0\" max=\"100\"></input>\n              <label for=\"cowbell\">Level of Social Distancing</label>\n            </div>\n            \n\n            <div>\n              <input id = \"masks\" type=\"checkbox\"></input>\n              <label>Masks?</label>\n            </div>\n            \n          </div>\n\n          <div id = \"generate\">\n              <button id=\"GenerateSimulation\">Generate Simulation</button>\n          </div>\n        </div>\n        \n        <Create />\n\n        <div id = \"bottomBorder\">\n          <div id = \"negativeCovid\">\n            Negative\n          </div>\n\n          <div id = \"positiveCovid\">\n            Positive\n          </div>\n\n          <div id = \"recoveredCovid\">\n            Recovered\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/coronavirus.a625a7c2.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}