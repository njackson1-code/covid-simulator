{"version":3,"sources":["cough.js","person.js","transmit.js","plot.js","create.js","App.js","serviceWorker.js","index.js","coronavirus.png","angel.png","logo.svg"],"names":["React","Component","Person","props","sendData","send","id","infected","x","y","arrived","occur","recovered","percent","parentCallback","xGoal","meeting","Math","random","yGoal","floor","xStart","yStart","social","masks","angel","state","date","Date","allNodes","first","time","cough","totalDistance","abs","fractionTime","this","sqrt","pow","updatePosition","timerID","setInterval","clearInterval","document","getElementById","velocity","style","backgroundColor","recoverTimer","setTimeout","recover","setState","color","floatingAngel","element","convertTimeToX","left","top","duration","slope","complete","allSick","stopMovement","infect","value","equation","self","check","console","log","progress","elements","remaining","start","tweenValue","otherFunction","prevProps","reset","className","src","Angel","Mask","Transmit","update","width","height","transition","Plot","callbackFunction","childData","arrivedNodes","numOfNodes","shouldUpdate","justReset","nodes","passNodes","change","taco","infectionRate","numOfMeetings","meetings","i","done","nodeMeeting","interactionDuration","idNum","num","map","item","key","transmissions","checkCollision","RESET","updateComponents","iid","sum","untouched","recov","length","j","jid","healthyid","distance","ind","push","message","Create","generate","event","target","checked","numPeople","isNaN","alert","assigned","numOfCreations","addEventListener","App","placeholder","type","name","min","max","for","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.66de75f6.chunk.js","sourcesContent":["import React from 'react';\nimport { tsParenthesizedType } from '@babel/types';\n\nclass Cough extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n        this.x = props.x;\n        \n        this.y = props.y;\n    }\n\n    componentDidMount() {\n        let element = document.getElementById('cough0');\n        \n        element.style.left = this.x + 'px';\n        element.style.top = this.y + 'px';\n        element.style.transition = '3s';\n\n        this.timerID = setTimeout(\n            () => this.updatePosition(),\n            50\n          );\n\n\n        \n    }\n\n    updatePosition(){\n        let element = document.getElementById('cough0');\n        element.style.width = '10px';\n        element.style.height = '10px';\n    }\n\n\n    render(){\n        return (\n        <div id = {'cough0'} className={\"cough\"}>\n\n        </div>\n        )\n    }\n}\n\nexport default Cough;","import React from 'react';\nimport Cough from './cough.js';\nimport Mask from './coronavirus.png';\nimport Angel from './angel.png';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\nimport { checkServerIdentity } from 'tls';\n\nclass Person extends React.Component{\n    constructor(props){\n        super(props)\n        \n        this.xGoal = this.props.meeting['x']  + 2 * Math.random() - 1;\n        this.yGoal = this.props.meeting['y'] + 2 * Math.random() - 1;\n        this.x = Math.floor(1+Math.random() * 98);\n        this.y = Math.floor(1+Math.random() * 98);\n        this.xStart = this.x;\n        this.yStart = this.y;\n        this.id = props.id;\n        this.social = props.social;\n        this.infected = props.infected;\n        this.masks = props.masks;\n        this.angel = false;\n        \n        if (this.id == 'a0'){\n            this.infected = true;\n        }\n        this.state = {date: new Date()};\n        this.allNodes = props.allNodes;\n        this.arrived = false;\n        this.recovered = false;\n\n        this.first = true;\n        \n\n        \n        this.time = 0;\n        this.percent = 0;\n        this.cough = false;\n        if (this.infected){\n            this.cough = true;\n        }\n\n        \n        this.totalDistance = Math.abs(this.xGoal - this.xStart);\n        \n    }\n\n    convertTimeToX(time){\n        let fractionTime = this.percent;\n        \n        //console.log(this.totalDistance + this.x)\n        let x = (this.totalDistance) * fractionTime + this.xStart;\n       \n        return x;\n    }\n\n    distance(x,y){\n        return Math.sqrt(Math.pow(this.xGoal - this.x,2) + Math.pow(this.yGoal - this.y, 2));\n    }\n\n    componentDidMount() {\n        \n        this.updatePosition();\n        this.timerID = setInterval(\n          () => this.updatePosition(),\n          50\n        );\n\n    }\n\n    stopMovement(){\n        clearInterval(this.timerID);\n        let element = document.getElementById(this.id);\n        element.velocity(\"stop\", true);\n    }\n\n\n\n    \n\n    getX(){\n        return this.x;\n    }\n\n    infect() {\n        \n        \n        let element = document.getElementById(this.id);\n        element.style.backgroundColor = 'red';\n        this.recoverTimer = setTimeout(\n            () => this.recover(),\n            22500\n        );\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    recover(){\n        \n        if (this.recovered){\n            return;\n        }\n        this.recovered = true;\n        let check = Math.random();\n        let color = '#f8ed62';\n        if (check <= 0.01){\n            this.angel = true;\n            color = 'white';\n            //this.stopMovement();\n            this.floatingAngel();\n        }\n        let element = document.getElementById(this.id);\n        element.style.backgroundColor = color;\n        this.setState({\n            date: new Date()\n        });\n    }\n\n\n    floatingAngel(){\n        this.yGoal = -200;\n        let element = document.getElementById(this.id);\n        this.arrived = true;\n        this.x = this.convertTimeToX(this.time);\n        this.sendData();\n        element.velocity(\"stop\", true);\n        element.velocity({\n            left: this.x + '%',\n            top: this.yGoal + '%'\n          \n\n        },\n        {duration: 12500\n           \n    \n        },\n\n        );\n    }\n    equation(x){\n        return this.slope(this.xStart,this.yStart) * (x - this.xStart) + this.yStart;\n    }\n\n    slope(x,y){\n        return ((this.yGoal - y)/(this.xGoal - x));\n    }\n\n    otherFunction(complete){\n        this.x = complete;\n    }\n\n   \n\n    \n    updatePosition(){\n        if (this.angel){\n            this.arrived = true;\n            this.sendData();\n            return;\n        }\n        if (this.allSick){\n            this.stopMovement();\n            if (this.infected && !this.recovered){\n                this.infect();\n            }\n\n            return;\n        }\n        this.social = document.getElementById(\"sd\").value/100;\n        this.time += 50;\n        //console.log(this.time)\n        \n        this.setState({\n            date: new Date()\n        });\n\n        if (this.arrived){\n            if (this.infected == true  && !this.recovered){\n                if (document.getElementById(this.id).style.backgroundColor != 'red' || document.getElementById(this.id).style.backgroundColor != 'white' || document.getElementById(this.id).style.backgroundColor != '#f8ed62'){\n                    this.infect()\n                }\n            }\n            return;\n        }\n\n       this.x = this.convertTimeToX(this.time);\n       this.y = this.equation(this.x);\n\n      \n\n        \n        if (this.infected && !this.recovered){\n            \n            if (this.infected == true  && !this.recovered){\n                if (document.getElementById(this.id).style.backgroundColor != 'red' || document.getElementById(this.id).style.backgroundColor != 'white' || document.getElementById(this.id).style.backgroundColor != '#f8ed62'){\n                    this.infect()\n                }\n            }\n        }\n        \n        if (this.percent == 1){\n            this.x = this.xGoal;\n            this.y = this.yGoal;\n            this.arrived = true;\n\n            this.sendData();\n            this.totalDistance = Math.abs(this.xGoal - this.xStart);\n            //let element = document.getElementById(\"title\");\n            //element.innerHTML = this.id;\n            return;\n        }\n        else {\n            this.sendData();\n            \n        }\n        var self = this;\n        \n            if (this.first){\n               let check = Math.random();\n               if (this.id == 'a0'){\n                   console.log(\"reset velocity\");\n               }\n               if (check < this.social){\n                   this.percent = 1;\n                   this.xGoal = this.x;\n                   this.yGoal = this.y;\n                   let element = document.getElementById(this.id);\n                element.style.left = this.x + \"%\";\n            \n\n                element.style.top = this.y + '%';\n                   return;\n               }\n           \n\n                let element = document.getElementById(this.id);\n\n                element.style.left = this.x + \"%\";\n                element.style.top = this.y + '%';\n\n                element.velocity({\n                    left: this.xGoal + '%',\n                    top: this.yGoal + '%'\n                  \n\n                },\n                {duration: 6500,\n                   \n                    progress: function(elements, complete, remaining, start, tweenValue) {\n                        otherFunction(self, complete);\n                        \n                    \n                    }\n                },\n\n                );\n\n                \n                 this.time = 0;\n\n                 \n            }\n\n            \n        \n            function otherFunction(self, complete){\n                \n                self.percent = complete;\n                \n            }\n        \n\n        this.first =  false;\n        \n    }\n    \n    \n    sendData = () => {\n        let send = {};\n        send['id'] = this.id;\n        send['infected'] = this.infected;\n        send['x'] = this.x;\n        send['y'] = this.y;\n        send['arrived'] = this.arrived;\n        send['cough'] = {}\n        send['cough'].occur = true;\n        send['cough'].x = this.x;\n        send['cough'].y = this.x;\n        send['recovered'] = this.recovered;\n        \n        if (this.arrived){\n            \n            send['percent'] = this.percent;\n        }\n        \n        this.props.parentCallback(send);\n    };\n\n    \n\n    componentDidUpdate(prevProps) {\n        \n        \n        this.allSick = this.props.allSick;\n        \n        if (this.props.infected){\n           \n            this.infected = this.props.infected;\n            this.cough = true;\n            \n        }\n       \n        if (this.props.reset) {\n            \n            this.arrived = false;\n            this.first = true;\n            this.xGoal = this.props.meeting['x'] + 2 * Math.random() - 1;\n            this.yGoal = this.props.meeting['y'] + 2 * Math.random() - 1;\n            this.xStart = this.x;\n            this.yStart = this.y;\n            this.arrived = false;\n            this.percent = 0;\n            \n        }\n    }\n\n    render() {\n        \n       \n        if (this.angel){\n            return (\n                <div id = {this.id} className = \"person\">\n                    <img className = 'angel' src = {Angel}></img>\n                </div>\n            )\n        }\n        if (this.masks){\n           \n            return (\n                <div id = {this.id} className = \"person\">\n                    <img src = {Mask}></img>\n                </div>\n            )\n        }\n        return (\n            <div id = {this.id} className = \"person\">\n                \n            </div>\n        )\n        \n    }\n\n\n}\n\nexport default Person;","import React from 'react';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\n\nclass Transmit extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n        this.id = props.id;\n        this.x = props.x;\n        this.y = props.y;\n      \n    }\n\n    componentDidMount() {\n        this.update();\n        \n\n       \n\n    }\n\n    update(){\n        let element = document.getElementById(this.id);\n        element.style.left = this.x + \"%\";\n        element.style.top = this.y + '%';\n        element.style.width = \"0px\";\n        element.style.height = \"0px\"\n        element.style.transition = '1.5s';\n        \n        this.setState({\n            date: new Date()\n        });\n\n        this.timerID = setTimeout(\n            () => {element.style.width = \"40px\";\n            element.style.height = \"40px\"},\n            50\n          );\n    }\n\n    render(){\n        return (\n            <div className={\"transmit\"} id = {this.id}></div>\n        )\n    }\n\n}\n\nexport default Transmit;","import React from 'react';\nimport Person from './person.js';\nimport Transmit from './transmit.js';\nimport { tsThisType } from '@babel/types';\n\nclass Plot extends React.Component {\n    constructor(props) {\n        super(props);\n        //initial values\n        this.justReset = false;\n        this.numOfNodes = props.numOfNodes;\n        this.nodes = []\n        this.passNodes = []\n\n        \n        \n        //dict for information being sent back\n        this.allNodes = {}\n        this.reset = false;\n        this.change = false;\n        this.taco = 0;\n\n        if (props.masks){\n            this.infectionRate = 100;\n        } else {\n            this.infectionRate = 25;\n        }\n\n        this.social = document.getElementById(\"sd\").value/100;\n        //\n        this.arrivedNodes = 0;\n\n        //meeting locations\n        this.numOfMeetings = this.numOfNodes / 4;\n        this.meetings = [];\n        for (let i = 0; i < this.numOfMeetings; i ++){\n            \n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(2+Math.random() * 96);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n        this.done = false;\n\n        //stores the meeting spot for each specified node\n        this.nodeMeeting = {}\n        this.interactionDuration = {}\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let check = Math.random();\n            let idNum = 'a' + i;\n            this.nodes[i] =  idNum;\n            this.passNodes[i] = idNum;\n            let num = Math.floor(Math.random() * this.numOfMeetings);\n            \n                this.nodeMeeting[idNum] = this.meetings[num];\n                this.nodeMeeting[idNum].x += (1 * Math.random() - 0.5)\n                this.nodeMeeting[idNum].y += (1 * Math.random() - 0.5)\n                \n            \n            \n\n            this.allNodes[idNum] = {};\n            this.interactionDuration = {};\n            this.allNodes[idNum].infected = false;\n        }\n\n\n        //converting to component list with keys\n        this.nodes = this.nodes.map((item)=> {\n            \n            return (\n                <Person  allSick = {false} masks = {props.masks} infected = {false} social = {this.social} recovered = {false} reset = {false} id={item} meeting={this.nodeMeeting[item]} parentCallback = {this.callbackFunction} key={item}/>\n            )\n        })\n       \n        \n        //infecting one of them\n        this.nodes[0] = <Person allSick = {false} masks = {props.masks} infected = {true} social = {this.social} id={'a0'} recovered = {false} reset = {false} meeting={this.nodeMeeting['a0']} parentCallback = {this.callbackFunction} key={'a0'}/>\n        this.state = {nodes: this.nodes};\n       \n\n        //transmission graphics\n        this.transmissions = [];\n    }\n\n    componentDidMount() {\n        //this.updatePosition();\n        \n        this.timerID = setInterval(\n          () => this.update(),\n          50\n        );\n        \n    }\n\n    \n    //function for checking if state of people need to be updated\n    update(){\n        //should update is set to false\n        this.shouldUpdate = false;\n        this.done = false;\n\n        //if everything had just been reset, want to update\n        if (this.justReset){\n            this.shouldUpdate = true;\n            this.justReset = false;\n        }\n\n        //checks for infections\n        this.checkCollision();\n       \n        //checks if every node has made it to meetings\n        //this.updateMeetings();\n        //if so, it changes meeting spots and makes the nodes move again\n        if (this.reset){\n            this.RESET();\n            this.shouldUpdate = true;\n        }\n\n        //sets state to render everything\n        //updates Components then renders them\n        if (this.shouldUpdate){\n            this.updateComponents();\n            this.setState({nodes: this.nodes});\n            if (this.reset){\n                this.reset = false;\n                this.justReset = true;\n            }\n            \n        }\n        \n    }\n\n\n    //updates Components with most recent data of all people\n    updateComponents(){\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let iid = 'a' + i;\n            this.nodes[i] = <Person allSick = {this.allSick} infected = {this.allNodes[iid].infected} recovered = {this.allNodes[iid].recovered} reset = {this.reset} id={iid} meeting={this.nodeMeeting[iid]} parentCallback = {this.callbackFunction} key={iid}/>\n        }\n        this.shouldUpdate = false;\n    }\n\n    hardcode(){\n        this.reset = false;\n    }\n\n\n    //distance between two people\n    distance(x,y){\n        return Math.sqrt(Math.pow(this.allNodes[x].x - this.allNodes[y].x,2) + Math.pow(this.allNodes[x].y - this.allNodes[y].y, 2));\n    }\n    \n\n    //funciton to return data from people\n    callbackFunction = (childData) => {\n        //if id of person already stored, but newly arrived, increment\n       // if (childData.id in this.allNodes && childData.arrived){\n            //if (!this.allNodes[childData.id].arrived && childData.arrived){\n         //       this.arrivedNodes = this.arrivedNodes + 1;\n            //}\n        //}\n        //else if not saved data but the person has arrived, increment\n        //else if (childData.arrived){\n          \n          //  this.arrivedNodes = this.arrivedNodes + 1;\n       // }\n        \n        if ('percent' in childData){\n            \n            this.arrivedNodes = this.arrivedNodes + 1;\n        }\n\n        //saved most recent data\n        this.allNodes[childData.id] = childData;\n        let element = document.getElementById(\"title\");\n        //element.innerHTML = this.arrivedNodes;\n        \n        //if all arrived, must reset\n        if (this.arrivedNodes == (this.numOfNodes)){\n            this.reset = true;\n            this.arrivedNodes = 0;\n            this.shouldUpdate = true;\n           \n        }\n\n        this.allSick = false;\n        \n    };\n    \n    checkCollision(){\n        let sum = 0; let untouched = 0; let recov = 0;\n       \n        for (let i = 0; i < this.nodes.length; i ++){\n            for (let j = 0; j < this.nodes.length; j ++){\n                let iid = this.passNodes[i];\n                let jid = this.passNodes[j];\n                \n                if (this.allNodes[iid].recovered || this.allNodes[jid].recovered || i == j || (this.allNodes[iid].infected && this.allNodes[jid].infected)){\n                    \n                    continue;\n                }\n                \n                if (!this.allNodes[iid].infected && !this.allNodes[jid].infected){\n                    \n                    continue;\n                }\n                \n                let healthyid = iid;\n                if (!this.allNodes[jid].infected){\n                    healthyid = jid;\n                }\n                \n                if (iid == 'a1'){\n                   //console.log(this.allNodes[iid].x);\n                }\n                \n                if (this.distance(iid,jid) < 2.5){\n                    \n                    this.interactionDuration[healthyid] += 1;\n                    let check = Math.random();\n                    if (check < (this.interactionDuration[healthyid]/this.infectionRate)){\n                        \n                        this.allNodes[healthyid].infected = true;\n                            //this.allNodes[jid].infected = true;\n                            this.shouldUpdate = true;\n\n                        let ind = this.transmissions.length;\n                        this.transmissions.push(<Transmit key = {\"tm\" + healthyid} id = {\"tm\" + healthyid} x={this.allNodes[healthyid].x} y={this.allNodes[healthyid].y}/>);\n                        setTimeout(() => {\n                            delete this.transmissions[ind];\n                            this.setState({nodes: this.nodes});\n                            \n                        }, 1500);\n                    }\n                } \n                else {\n                    this.interactionDuration[healthyid] = 0;\n                }\n                \n                /* if (i != j){\n                    if ((this.allNodes[iid].infected || this.allNodes[jid].infected) && !(this.allNodes[iid].infected && this.allNodes[jid].infected)){\n                        let check = Math.random();\n                        \n                        if (check < this.infectionRate && this.distance(iid,jid) < 2.5){\n                            //if it makes one sick, it want to update it\n                            this.allNodes[iid].infected = true;\n                            this.allNodes[jid].infected = true;\n                            this.shouldUpdate = true;\n                        }\n                    }\n                    \n                } */\n            }\n            if (!this.allNodes[this.passNodes[i]].infected && !this.allNodes[this.passNodes[i]].recovered){\n                untouched = untouched + 1;\n            }\n            if (this.allNodes[this.passNodes[i]].infected && !this.allNodes[this.passNodes[i]].recovered) {\n                sum = sum + 1;\n            }\n            if (this.allNodes[this.passNodes[i]].recovered){\n                recov = recov + 1;\n            }\n        }\n\n        if (sum == this.numOfNodes || untouched == 0 || (untouched + recov == this.numOfNodes)){\n            this.allSick = true;\n            this.message = \"Immunity Reached. No one else to spread disease to.\"\n        }\n        \n    }\n\n    updateMeetings(){\n        for (let i = 0; i < this.nodes.length; i ++){\n            let iid = this.passNodes[i];\n            if (!this.allNodes[iid].arrived){\n                \n                for (let j = 0; j < this.nodes.length; j ++){\n                    let jid = this.passNodes[j];\n                    \n                    //this.nodes[j] = <Person infected = {false} reset = {false} id={jid} meeting={this.nodeMeeting[jid]} parentCallback = {this.callbackFunction} key={jid}/>\n                }\n                return;\n            }\n        }\n\n        for (let i = 0; i < this.numOfMeetings; i ++){\n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(2+Math.random() * 96);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n       \n            for (let i = 0; i < this.nodes.length; i ++){\n                let iid = this.passNodes[i];\n                this.allNodes[iid].arrived = false;\n            }\n         \n\n        this.reset = true;\n    }\n\n    RESET() {\n        this.nodeMeeting = {}\n        //this.nodes = []\n        \n        for (let i = 0; i < this.numOfMeetings; i ++){\n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(1+Math.random() * 98);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n        }\n\n\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let idNum = 'a' + i;\n            this.passNodes[i] = idNum;\n            let num = Math.floor(Math.random() * this.numOfMeetings);\n            this.nodeMeeting[idNum] = this.meetings[num];\n            \n            \n            \n            \n            \n            \n           \n            //this.nodes[i] = <Person infected = {this.allNodes[iid].infected} reset = {true} id={iid} meeting={this.nodeMeeting[iid]} parentCallback = {this.callbackFunction} key={iid}/>                        \n\n            \n            \n            //this.setState({nodes: this.nodes});\n        }\n       \n        \n        //this.setState({nodes: this.nodes});\n        \n        \n\n        \n        \n\n        \n    }\n\n\n    render (){\n        //this.nodeMeeting = {}\n        \n        let pp;\n        \n        if (this.taco >= 2 && !this.reset) {\n            for (let i = 0; i < this.numOfNodes; i ++){\n                let idNum = 'a' + i;\n                let check = Math.random();\n                \n                //this.nodes[i] = <Person infected = {this.allNodes[idNum].infected} reset = {false} id={idNum} key={idNum} parentCallback = {this.callbackFunction}/>\n\n              \n              \n\n                \n                \n            }\n        }\n        this.taco = this.taco + 1;  \n        \n        if (this.change){\n            this.change = false;\n            \n            for (let i = 0; i < this.numOfNodes; i ++){\n                let idNum = 'a' + i;\n                //this.nodes[i] = <Person infected = {this.allNodes[idNum].infected} reset = {false} id={idNum} key={idNum} parentCallback = {this.callbackFunction}/>\n            }\n        } \n        \n        if (this.reset){\n            \n            this.change = true;\n        }\n\n       \n        console.log(this.state.nodes.length)\n        if (this.allSick){\n            clearInterval(this.timerID);\n            \n            return (\n            \n           \n            <>  \n                {this.allSick && <div id = {\"endmsg\"}>{this.message}</div>}\n                <div>\n                \n                    <div>{this.state.nodes}</div>\n                    \n                    <div>{this.transmissions}</div>\n                </div>\n            </>\n            \n            )\n        }\n        \n        return ( \n            <>\n            {this.allSick && <div id = {\"endmsg\"}>{this.message}</div>}\n            <div>\n                <div>{this.state.nodes}</div>\n                \n                <div>{this.transmissions}</div>\n            </div>\n            </>\n           \n        )\n    }\n}\n\nexport default Plot;","import Plot from './plot.js';\nimport React from 'react';\n\n\nclass Create extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = ({numOfCreations: 0});\n        this.numOfCreations = 0;\n        this.assigned = false;\n        \n        //this.numPeople = document.getElementById('numPeople').value;\n    }\n\n    componentDidMount() {\n        \n        this.assigned = false;\n        let btn = document.getElementById(\"GenerateSimulation\");\n        //this.numPeople = document.getElementById('numPeople').value;\n        let self = this;\n        document.addEventListener('click', this.generate);\n\n       \n        //btn.onClick = this.generate();\n    }\n\n    generate = event =>{\n        \n        if (event.target.id != 'GenerateSimulation'){\n            return;\n        }\n\n        this.masks = document.getElementById(\"masks\").checked;\n       \n        if (this.masks){\n           \n            this.masks = true;\n        }\n        else {\n            this.masks = false;\n        }\n\n\n        this.numPeople = document.getElementById('numPeople').value;\n     \n        if (isNaN(this.numPeople)){\n            alert(\"Please enter number of people for simulation\");\n            return;\n        }\n        this.assigned = true;\n        this.numOfCreations ++;\n        this.setState({numOfCreations: this.numOfCreations});\n    }\n\n\n    render(){\n        if (!this.assigned){\n            return <div id = \"graphArea\"></div>;\n        }\n       \n\n        return (\n        <div id = \"graphArea\">\n          <Plot key = {this.numOfCreations} numOfNodes = {this.numPeople} masks = {this.masks} />\n        </div>\n        )\n    }\n\n}\n\nexport default Create;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './person.js';\nimport Plot from './plot.js';\nimport Create from './create.js';\n\nfunction App() {\n  \n  \n  \n  return (\n    <>\n      <div className=\"App\">\n        <div id = \"title\">\n          Covid Visualizer\n        </div>\n\n        <div id = \"topBox\">\n          <div id = \"inputs\">\n            <div id = \"people\">\n              <input id = \"numPeople\" placeholder=\"100\"></input>\n              <label>Number of People</label>\n            </div>\n            \n            <div id = \"socialDistance\">\n              <input type=\"range\" placeholder=\"Social Distancing\" id =\"sd\" name=\"cowbell\" min=\"0\" max=\"100\"></input>\n              <label for=\"cowbell\">Level of Social Distancing</label>\n            </div>\n            \n\n            <div>\n              <input id = {\"masks\"} type=\"checkbox\"></input>\n              <label>Masks</label>\n            </div>\n            \n          </div>\n\n          <div id = \"generate\">\n              <button id=\"GenerateSimulation\">Generate Simulation</button>\n          </div>\n        </div>\n        \n        <Create />\n\n        <div id = \"bottomBorder\">\n          <div id = \"negativeCovid\">\n            Negative\n          </div>\n\n          <div id = \"positiveCovid\">\n            Positive\n          </div>\n\n          <div id = \"recoveredCovid\">\n            Recovered\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/coronavirus.a625a7c2.png\";","module.exports = __webpack_public_path__ + \"static/media/angel.db2b3117.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}