{"version":3,"sources":["cough.js","person.js","transmit.js","meeting.js","plot.js","create.js","App.js","serviceWorker.js","index.js","coronavirus.png","angel.png","mountain.png","company.png","logo.svg"],"names":["React","Component","Person","props","sendData","send","id","infected","x","y","arrived","occur","recovered","percent","parentCallback","xGoal","meeting","Math","random","yGoal","floor","xStart","yStart","social","masks","angel","deathRate","key","state","date","Date","allNodes","first","infex","time","cough","totalDistance","fractionTime","this","sqrt","pow","updatePosition","timerID","setInterval","clearInterval","clearTimeout","recoverTimer","element","document","getElementById","velocity","style","backgroundColor","setTimeout","recover","setState","console","log","color","floatingAngel","convertTimeToX","left","top","duration","slope","complete","allSick","stopMovement","infect","value","equation","self","check","progress","elements","remaining","start","tweenValue","otherFunction","prevProps","reset","className","src","Angel","Mask","Transmit","widthOffset","clientWidth","heightOffset","clientHeight","parseFloat","update","width","height","transition","$el","$","css","transform","Meeting","type","Company","Mountain","Plot","callbackFunction","childData","arrivedNodes","innerHTML","numOfNodes","resetPing","shouldUpdate","justReset","nodes","passNodes","change","taco","infectionRate","renderMeetings","numOfMeetings","meetings","i","push","done","nodeMeeting","interactionDuration","idNum","num","map","item","transmissions","setPing","cancelPing","checkCollision","RESET","updateComponents","iid","pingTimer","ping","sum","untouched","recov","length","j","jid","healthyid","distance","locationTransmission","ind","message","display","Create","generate","event","target","clicked","numPeople","isNaN","alert","assigned","numOfCreations","maskSet","addEventListener","App","placeholder","name","min","max","for","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.27b20b9d.chunk.js","sourcesContent":["import React from 'react';\nimport { tsParenthesizedType } from '@babel/types';\n\nclass Cough extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n        this.x = props.x;\n        \n        this.y = props.y;\n    }\n\n    componentDidMount() {\n        let element = document.getElementById('cough0');\n        \n        element.style.left = this.x + 'px';\n        element.style.top = this.y + 'px';\n        element.style.transition = '3s';\n\n        this.timerID = setTimeout(\n            () => this.updatePosition(),\n            50\n          );\n\n\n        \n    }\n\n    updatePosition(){\n        let element = document.getElementById('cough0');\n        element.style.width = '10px';\n        element.style.height = '10px';\n    }\n\n\n    render(){\n        return (\n        <div id = {'cough0'} className={\"cough\"}>\n\n        </div>\n        )\n    }\n}\n\nexport default Cough;","import React from 'react';\nimport Cough from './cough.js';\nimport Mask from './coronavirus.png';\nimport Angel from './angel.png';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\nimport { checkServerIdentity } from 'tls';\n\nclass Person extends React.Component{\n    constructor(props){\n        super(props)\n        \n        this.xGoal = this.props.meeting['x']  + 2 * Math.random() - 1;\n        this.yGoal = this.props.meeting['y'] + 2 * Math.random() - 1;\n        this.x = Math.floor(1+Math.random() * 98);\n        this.y = Math.floor(1+Math.random() * 98);\n        this.xStart = this.x;\n        this.yStart = this.y;\n        this.id = props.id;\n        this.social = props.social;\n        this.infected = props.infected;\n        this.masks = props.masks;\n        this.angel = false;\n        this.deathRate = 0.01;\n        \n        if (this.id == this.key + 'a0'){\n            this.infected = true;\n        }\n        this.state = {date: new Date()};\n        this.allNodes = props.allNodes;\n        this.arrived = false;\n        this.recovered = false;\n\n        this.first = true;\n        this.infex = false;\n\n        \n        this.time = 0;\n        this.percent = 0;\n        this.cough = false;\n        if (this.infected){\n            this.cough = true;\n        }\n\n        \n        this.totalDistance = this.xGoal - this.xStart;\n        \n    }\n\n    convertTimeToX(time){\n        let fractionTime = this.percent;\n        \n        //console.log(this.totalDistance + this.x)\n        let x = (this.totalDistance) * fractionTime + this.xStart;\n       \n        return x;\n    }\n\n    distance(x,y){\n        return Math.sqrt(Math.pow(this.xGoal - this.x,2) + Math.pow(this.yGoal - this.y, 2));\n    }\n\n    componentDidMount() {\n        \n        this.updatePosition();\n        this.timerID = setInterval(\n          () => this.updatePosition(),\n          50\n        );\n\n    }\n\n    componentWillUnmount(){\n        //console.log(this.id)\n        clearInterval(this.timerID);\n        clearTimeout(this.recoverTimer);\n    }\n\n    stopMovement(){\n        clearInterval(this.timerID);\n        let element = document.getElementById(this.id);\n        if (!this.angel){\n            element.velocity(\"stop\", true);\n        }\n        \n    }\n\n\n\n    \n\n    getX(){\n        return this.x;\n    }\n\n    infect() {\n        \n        this.infex = true;\n        let element = document.getElementById(this.id);\n        element.style.backgroundColor = 'red';\n        \n        this.recoverTimer = setTimeout(\n            () => this.recover(),\n            22500\n        );\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    recover(){\n        \n        if (this.recovered){\n            return;\n        }\n        console.log(this.id)\n        this.recovered = true;\n        let check = Math.random();\n        let color = '#f8ed62';\n        if (check <= this.deathRate){\n            this.angel = true;\n            color = 'white';\n            //this.stopMovement();\n            this.floatingAngel();\n        }\n        let element = document.getElementById(this.id);\n        element.style.backgroundColor = color;\n        this.setState({\n            date: new Date()\n        });\n    }\n\n\n    floatingAngel(){\n        this.yGoal = -200;\n        let element = document.getElementById(this.id);\n        this.arrived = true;\n        this.x = this.convertTimeToX(this.time);\n        this.sendData();\n        element.velocity(\"stop\", true);\n        element.velocity({\n            left: this.x + '%',\n            top: this.yGoal + '%'\n          \n\n        },\n        {duration: 12500\n           \n    \n        },\n\n        );\n    }\n    equation(x){\n        return this.slope(this.xStart,this.yStart) * (x - this.xStart) + this.yStart;\n    }\n\n    slope(x,y){\n        return ((this.yGoal - y)/(this.xGoal - x));\n    }\n\n    otherFunction(complete){\n        this.x = complete;\n    }\n\n   \n\n    \n    updatePosition(){\n        \n        if (this.allSick){\n            this.stopMovement();\n            if (this.infected && !this.recovered && !this.infex){\n\n                this.infect();\n            }\n\n            return;\n        }\n        this.social = document.getElementById(\"sd\").value/100;\n        this.time += 50;\n        //console.log(this.time)\n        \n        this.setState({\n            date: new Date()\n        });\n\n        if (this.arrived){\n            if (this.infected == true  && !this.recovered){\n                if (!this.infex){\n                    this.infect()\n                }\n            }\n            return;\n        }\n        else if (this.angel){\n            if (this.angel){\n                this.arrived = true;\n                this.sendData();\n                return;\n            }\n        }\n\n       this.x = this.convertTimeToX(this.time);\n       this.y = this.equation(this.x);\n\n        if (this.id == '1a0'){\n           // console.log(this.y);\n        }\n      \n        \n        if (this.infected && !this.recovered){\n            \n            if (this.infected == true  && !this.recovered){\n                if (!this.infex){\n                    this.infect()\n                }\n            }\n        }\n        \n        if (this.percent == 1){\n            this.x = this.xGoal;\n            this.y = this.yGoal;\n            this.arrived = true;\n\n            this.sendData();\n            \n            \n            //let element = document.getElementById(\"title\");\n            //element.innerHTML = this.id;\n            return;\n        }\n        else {\n            this.sendData();\n            \n        }\n        var self = this;\n        \n            if (this.first){\n               let check = Math.random();\n               if (this.id == 'a0'){\n                   //console.log(\"reset velocity\");\n               }\n               if (check < this.social){\n                   this.percent = 1;\n                   this.xGoal = this.x;\n                   this.yGoal = this.y;\n                   let element = document.getElementById(this.id);\n                element.style.left = this.x + \"%\";\n            \n\n                element.style.top = this.y + '%';\n                   return;\n               }\n           \n               \n                let element = document.getElementById(this.id);\n                \n                element.style.left = this.x + \"%\";\n                element.style.top = this.y + '%';\n\n                element.velocity({\n                    left: this.xGoal + '%',\n                    top: this.yGoal + '%'\n                  \n\n                },\n                {duration: 6500,\n                   \n                    progress: function(elements, complete, remaining, start, tweenValue) {\n                        otherFunction(self, complete);\n                        \n                    \n                    }\n                },\n\n                );\n\n                \n                 this.percent = 0;\n\n                 \n            }\n\n            \n        \n            function otherFunction(self, complete){\n                \n                self.percent = complete;\n                \n            }\n        \n\n        this.first =  false;\n        \n    }\n    \n    \n    sendData = () => {\n        let send = {};\n        send['id'] = this.id;\n        send['infected'] = this.infected;\n        send['x'] = this.x;\n        send['y'] = this.y;\n        send['arrived'] = this.arrived;\n        send['cough'] = {}\n        send['cough'].occur = true;\n        send['cough'].x = this.x;\n        send['cough'].y = this.x;\n        send['recovered'] = this.recovered;\n        \n        if (this.arrived){\n            \n            send['percent'] = this.percent;\n        }\n        \n        this.props.parentCallback(send);\n    };\n\n    \n\n    componentDidUpdate(prevProps) {\n        \n        \n        this.allSick = this.props.allSick;\n        \n        if (this.props.infected){\n           \n            this.infected = this.props.infected;\n            this.cough = true;\n            \n        }\n       \n        if (this.props.reset) {\n            \n            this.arrived = false;\n            this.first = true;\n            this.xGoal = this.props.meeting['x'] + 2 * Math.random() - 1;\n            this.yGoal = this.props.meeting['y'] + 2 * Math.random() - 1;\n            this.xStart = this.x;\n            this.yStart = this.y;\n            this.arrived = false;\n            this.percent = 0;\n            this.totalDistance = this.xGoal - this.xStart;\n        }\n    }\n\n    render() {\n        \n       \n        if (this.angel){\n            return (\n                <div id = {this.id} className = \"person\">\n                    <img className = 'angel' src = {Angel}></img>\n                </div>\n            )\n        }\n        if (this.masks){\n           \n            return (\n                <div id = {this.id} className = \"person\">\n                    <img src = {Mask}></img>\n                </div>\n            )\n        }\n        return (\n            <div id = {this.id} className = \"person\">\n                \n            </div>\n        )\n        \n    }\n\n\n}\n\nexport default Person;","import React from 'react';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\nimport * as $ from 'jquery';\n\nclass Transmit extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {date: new Date()};\n        this.id = props.id;\n        let widthOffset = document.getElementById(\"graphArea\").clientWidth;\n        let heightOffset = document.getElementById(\"graphArea\").clientHeight;\n\n        console.log(parseFloat(props.x)/100)\n        this.x = parseFloat(props.x)/100 *parseFloat(widthOffset) + 10;\n        this.y = parseFloat(props.y)/100 *parseFloat(heightOffset) +10;\n        //console.log(this.x)\n      \n    }\n\n    componentDidMount() {\n        this.update();\n        \n\n       \n\n    }\n\n    update(){\n        \n        let element = document.getElementById(this.id);\n        element.style.left = this.x + \"px\";\n        element.style.top = this.y + 'px';\n        element.style.width = \"1px\";\n        element.style.height = \"1px\"\n        element.style.transition = '1.5s';\n\n        var $el = $(\"#\" + this.id);\n        \n        this.setState({\n            date: new Date()\n        });\n\n        this.timerID = setTimeout(\n            () => {$el.css({\n                transform: \"scale(\" + 35 + \")\",\n               \n\n              });\n                //element.style.width = \"40px\";\n            //element.style.height = \"40px\"\n        },\n            50\n          );\n\n      \n    }\n\n    render(){\n        return (\n            <div className={\"transmit\"} id = {this.id}></div>\n        )\n    }\n\n}\n\nexport default Transmit;","import React from 'react';\nimport { tsParenthesizedType, thisExpression } from '@babel/types';\nimport Mountain from './mountain.png';\nimport Company from './company.png';\nimport * as $ from 'jquery';\n\n\nclass Meeting extends React.Component{\n    constructor(props){\n        super(props);\n\n        let widthOffset = document.getElementById(\"graphArea\").clientWidth;\n        let heightOffset = document.getElementById(\"graphArea\").clientHeight;\n\n        this.x = parseFloat(props.x)/100 *parseFloat(widthOffset) - 25;\n        this.y = parseFloat(props.y)/100 *parseFloat(heightOffset) - 25;\n        this.type = props.type;\n        this.id = props.id;\n    }\n\n    componentDidMount(){\n        console.log(\"aqui\")\n        let element = document.getElementById(this.id);\n        console.log(element)\n        element.style.left = this.x + \"px\";\n        element.style.top = this.y + \"px\";\n    }\n\n    render(){\n        if (this.type == 1){\n            return(\n                <div id = {this.id} className=\"meeting\">\n                    <img src={Company}></img>\n                </div>\n            ) \n        }\n        return(\n            <div id = {this.id} className=\"meeting\">\n                <img src={Mountain}></img>\n            </div>\n        )\n    }\n}\n\n\nexport default Meeting;","import React from 'react';\nimport Person from './person.js';\nimport Transmit from './transmit.js';\nimport Meeting from './meeting.js';\nimport { tsThisType } from '@babel/types';\n\nclass Plot extends React.Component {\n    constructor(props) {\n        super(props);\n        //initial values\n        this.justReset = false;\n        this.numOfNodes = props.numOfNodes;\n        this.nodes = []\n        this.passNodes = []\n        this.key = props.id;\n\n        \n        \n        //dict for information being sent back\n        this.allNodes = {}\n        this.reset = false;\n        this.change = false;\n        this.taco = 0;\n\n        if (props.masks){\n            this.infectionRate = 200;\n        } else {\n            this.infectionRate = 75;\n        }\n\n        this.social = document.getElementById(\"sd\").value/100;\n        //\n        this.arrivedNodes = 0;\n\n        //meeting locations\n        this.renderMeetings = [];\n        this.numOfMeetings = this.numOfNodes / 4;\n        this.meetings = [];\n        for (let i = 0; i < this.numOfMeetings; i ++){\n            \n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(2+Math.random() * 96);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n            \n\n            let key = \"m\" + i;\n            let type = 0;\n            if (x > 50){\n                type = 1;\n            }\n\n            this.meetings[i].type = type;\n\n            this.renderMeetings.push(<Meeting x={x} y = {y} key = {key} id = {key} type = {type}/>)\n        }\n        console.log(this.meetings)\n\n        this.done = false;\n\n        //stores the meeting spot for each specified node\n        this.nodeMeeting = {}\n        this.interactionDuration = {}\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let check = Math.random();\n            let idNum = this.key + 'a' + i;\n            this.nodes[i] =  idNum;\n            this.passNodes[i] = idNum;\n            let num = Math.floor(Math.random() * this.numOfMeetings);\n            \n            this.nodeMeeting[idNum] = this.meetings[num];\n            this.nodeMeeting[idNum].x += (1 * Math.random() - 0.5)\n            this.nodeMeeting[idNum].y += (1 * Math.random() - 0.5)\n                \n            \n            \n\n            this.allNodes[idNum] = {};\n            this.interactionDuration = {};\n            this.allNodes[idNum].infected = false;\n        }\n\n\n        //converting to component list with keys\n        this.nodes = this.nodes.map((item)=> {\n            \n            return (\n                <Person  allSick = {false} masks = {props.masks} infected = {false} social = {this.social} recovered = {false} reset = {false} id={item} meeting={this.nodeMeeting[item]} parentCallback = {this.callbackFunction} key={item}/>\n            )\n        })\n       \n        \n        //infecting one of them\n        this.nodes[0] = <Person allSick = {false} masks = {props.masks} infected = {true} social = {this.social} id={this.key + 'a0'} recovered = {false} reset = {false} meeting={this.nodeMeeting[this.key + 'a0']} parentCallback = {this.callbackFunction} key={this.key + 'a0'}/>\n        this.state = {nodes: this.nodes};\n       \n\n        //transmission graphics\n        this.transmissions = [];\n    }\n\n    componentDidMount() {\n        //this.updatePosition();\n        \n        this.timerID = setInterval(\n          () => this.update(),\n          50\n        );\n        this.setPing();\n        \n    }\n    componentDidUpdate(prevProps) {\n        this.allSick = this.props.allSick;\n        if (this.key != this.props.id){\n            this.setPing();\n        }\n       \n        \n    }\n\n    //need algorithm for spacing meeting locations\n\n    componentWillUnmount(){\n        console.log(\"all sick time\")\n        this.cancelPing();\n    }\n\n    \n    //function for checking if state of people need to be updated\n    update(){\n        //should update is set to false\n        this.shouldUpdate = false;\n        this.done = false;\n\n        //if everything had just been reset, want to update\n        if (this.justReset){\n            this.shouldUpdate = true;\n            this.justReset = false;\n        }\n\n        //checks for infections\n        this.checkCollision();\n       \n        //checks if every node has made it to meetings\n        //this.updateMeetings();\n        //if so, it changes meeting spots and makes the nodes move again\n        if (this.reset){\n            this.RESET();\n            this.shouldUpdate = true;\n        }\n\n        //sets state to render everything\n        //updates Components then renders them\n        if (this.shouldUpdate){\n            this.updateComponents();\n            this.setState({nodes: this.nodes});\n            if (this.reset){\n                this.reset = false;\n                this.justReset = true;\n            }\n            \n        }\n        \n    }\n\n\n    //updates Components with most recent data of all people\n    updateComponents(){\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let iid = this.key + 'a' + i;\n            this.nodes[i] = <Person allSick = {this.allSick} infected = {this.allNodes[iid].infected} recovered = {this.allNodes[iid].recovered} reset = {this.reset} id={iid} meeting={this.nodeMeeting[iid]} parentCallback = {this.callbackFunction} key={iid}/>\n        }\n        this.shouldUpdate = false;\n    }\n\n    hardcode(){\n        this.reset = false;\n    }\n\n\n    //distance between two people\n    distance(x,y){\n        return Math.sqrt(Math.pow(this.allNodes[x].x - this.allNodes[y].x,2) + Math.pow(this.allNodes[x].y - this.allNodes[y].y, 2));\n    }\n\n    cancelPing(){\n        clearTimeout(this.pingTimer);\n    }\n\n    setPing(){\n        console.log(\"setping\")\n        this.pingTimer = setTimeout(\n            () => this.ping(),\n            10000\n          );\n    }\n\n    resetPing(){\n        console.log(\"resetping\")\n        clearTimeout(this.pingTimer);\n        this.pingTimer = setTimeout(\n            () => this.ping(),\n            10000\n        );\n    }\n\n    ping(){\n        console.log(\"ping\")\n        this.reset = true;\n        this.arrivedNodes = 0;\n        this.resetPing();\n    }\n\n\n    \n\n    //funciton to return data from people\n    callbackFunction = (childData) => {\n        //if id of person already stored, but newly arrived, increment\n       // if (childData.id in this.allNodes && childData.arrived){\n            //if (!this.allNodes[childData.id].arrived && childData.arrived){\n         //       this.arrivedNodes = this.arrivedNodes + 1;\n            //}\n        //}\n        //else if not saved data but the person has arrived, increment\n        //else if (childData.arrived){\n          \n          //  this.arrivedNodes = this.arrivedNodes + 1;\n       // }\n        \n        if ('percent' in childData){\n            \n            this.arrivedNodes = this.arrivedNodes + 1;\n        }\n        \n        //saved most recent data\n        this.allNodes[childData.id] = childData;\n        let element = document.getElementById(\"title\");\n        element.innerHTML = this.arrivedNodes;\n        \n        //if all arrived, must reset\n        if (this.arrivedNodes == (this.numOfNodes)){\n            this.resetPing();\n            this.reset = true;\n            this.arrivedNodes = 0;\n            this.shouldUpdate = true;\n           \n        }\n\n        this.allSick = false;\n        \n    };\n    \n    checkCollision(){\n        let sum = 0; let untouched = 0; let recov = 0;\n       \n        for (let i = 0; i < this.nodes.length; i ++){\n            for (let j = 0; j < this.nodes.length; j ++){\n                let iid = this.passNodes[i];\n                let jid = this.passNodes[j];\n                \n                if (this.allNodes[iid].recovered || this.allNodes[jid].recovered || i == j || (this.allNodes[iid].infected && this.allNodes[jid].infected)){\n                    \n                    continue;\n                }\n                \n                if (!this.allNodes[iid].infected && !this.allNodes[jid].infected){\n                    \n                    continue;\n                }\n                \n                let healthyid = iid;\n                if (!this.allNodes[jid].infected){\n                    healthyid = jid;\n                }\n                \n                if (iid == 'a1'){\n                   //console.log(this.allNodes[iid].x);\n                }\n                \n                if (this.distance(iid,jid) < 2.5){\n                    \n                    this.interactionDuration[healthyid] += 1;\n                    let check = Math.random();\n                    let locationTransmission = 1/2;\n                    if (this.nodeMeeting[healthyid].type == 0){\n                        locationTransmission = 200;\n                    }\n                    if (check < ((this.interactionDuration[healthyid]/this.infectionRate)/locationTransmission)){\n                        \n                        this.allNodes[healthyid].infected = true;\n                            //this.allNodes[jid].infected = true;\n                            this.shouldUpdate = true;\n\n                        let ind = this.transmissions.length;\n                        this.transmissions.push(<Transmit key = {\"tm\" + healthyid} id = {\"tm\" + healthyid} x={this.allNodes[healthyid].x} y={this.allNodes[healthyid].y}/>);\n                        setTimeout(() => {\n                            delete this.transmissions[ind];\n                            this.setState({nodes: this.nodes});\n                            \n                        }, 1500);\n                    }\n                } \n                else {\n                    this.interactionDuration[healthyid] = 0;\n                }\n                \n                /* if (i != j){\n                    if ((this.allNodes[iid].infected || this.allNodes[jid].infected) && !(this.allNodes[iid].infected && this.allNodes[jid].infected)){\n                        let check = Math.random();\n                        \n                        if (check < this.infectionRate && this.distance(iid,jid) < 2.5){\n                            //if it makes one sick, it want to update it\n                            this.allNodes[iid].infected = true;\n                            this.allNodes[jid].infected = true;\n                            this.shouldUpdate = true;\n                        }\n                    }\n                    \n                } */\n            }\n            if (!this.allNodes[this.passNodes[i]].infected && !this.allNodes[this.passNodes[i]].recovered){\n                untouched = untouched + 1;\n            }\n            if (this.allNodes[this.passNodes[i]].infected && !this.allNodes[this.passNodes[i]].recovered) {\n                sum = sum + 1;\n            }\n            if (this.allNodes[this.passNodes[i]].recovered){\n                recov = recov + 1;\n            }\n        }\n\n        if (sum == this.numOfNodes || untouched == 0 || (untouched + recov == this.numOfNodes)){\n            this.allSick = true;\n            this.message = \"Immunity Reached. No one else to spread disease to.\"\n        }\n        \n    }\n\n    updateMeetings(){\n        for (let i = 0; i < this.nodes.length; i ++){\n            let iid = this.passNodes[i];\n            if (!this.allNodes[iid].arrived){\n                \n                for (let j = 0; j < this.nodes.length; j ++){\n                    let jid = this.passNodes[j];\n                    \n                    //this.nodes[j] = <Person infected = {false} reset = {false} id={jid} meeting={this.nodeMeeting[jid]} parentCallback = {this.callbackFunction} key={jid}/>\n                }\n                return;\n            }\n        }\n\n        this.renderMeetings = [];\n        for (let i = 0; i < this.numOfMeetings; i ++){\n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(2+Math.random() * 96);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n\n            let key = \"m\" + x;\n            let type = 0;\n            if (x > 50){\n                type = 1;\n            }\n\n            this.meetings[i].type = type;\n\n            this.renderMeetings.push(<Meeting x={x} y = {y} key = {key} id = {key} type = {type}/>)\n        }\n        console.log(this.renderMeetings)\n\n       \n            for (let i = 0; i < this.nodes.length; i ++){\n                let iid = this.passNodes[i];\n                this.allNodes[iid].arrived = false;\n            }\n         \n\n        this.reset = true;\n    }\n\n    RESET() {\n        this.nodeMeeting = {}\n        //this.nodes = []\n        //this.renderMeetings = [];\n        /* for (let i = 0; i < this.numOfMeetings; i ++){\n            let x = Math.floor(1+Math.random() * 98);\n            let y = Math.floor(1+Math.random() * 98);\n            this.meetings[i] = {}\n            this.meetings[i].x = x;\n            this.meetings[i].y = y;\n\n            let key = \"m\" + x;\n            let type = 0;\n            if (x > 50){\n                type = 1;\n            }\n\n            this.meetings[i].type = type;\n\n            this.renderMeetings.push(<Meeting x={x} y = {y} key = {key} id = {key} type = {type}/>)\n            \n\n        } */\n\n\n        for (let i = 0; i < this.numOfNodes; i ++){\n            let idNum =  this.key + 'a' + i;\n            this.passNodes[i] = idNum;\n            let num = Math.floor(Math.random() * this.numOfMeetings);\n            this.nodeMeeting[idNum] = this.meetings[num];\n            \n            \n            \n            \n            \n           \n            //this.nodes[i] = <Person infected = {this.allNodes[iid].infected} reset = {true} id={iid} meeting={this.nodeMeeting[iid]} parentCallback = {this.callbackFunction} key={iid}/>                        \n\n            \n            \n            //this.setState({nodes: this.nodes});\n        }\n       \n        \n        //this.setState({nodes: this.nodes});\n        \n        \n\n        \n        \n\n        \n    }\n\n\n    render (){\n        //this.nodeMeeting = {}\n        \n        let pp;\n        \n        if (this.taco >= 2 && !this.reset) {\n            for (let i = 0; i < this.numOfNodes; i ++){\n                let idNum = 'a' + i;\n                let check = Math.random();\n                \n                //this.nodes[i] = <Person infected = {this.allNodes[idNum].infected} reset = {false} id={idNum} key={idNum} parentCallback = {this.callbackFunction}/>\n\n              \n              \n\n                \n                \n            }\n        }\n        this.taco = this.taco + 1;  \n        \n        if (this.change){\n            this.change = false;\n            \n            for (let i = 0; i < this.numOfNodes; i ++){\n                let idNum = 'a' + i;\n                //this.nodes[i] = <Person infected = {this.allNodes[idNum].infected} reset = {false} id={idNum} key={idNum} parentCallback = {this.callbackFunction}/>\n            }\n        } \n        \n        if (this.reset){\n            \n            this.change = true;\n        }\n\n       \n        \n        if (this.allSick){\n            clearInterval(this.timerID);\n            document.getElementById(\"overshadow\").style.display = 'block';\n            \n            return (\n            \n           \n            <>  \n                {this.allSick && <div id = {\"endmsg\"}>{this.message}</div>}\n                <div>\n                \n                    <div>{this.state.nodes}</div>\n                    \n                    <div>{this.transmissions}</div>\n\n                    <div>{this.renderMeetings}</div>\n                </div>\n            </>\n            \n            )\n        }\n        \n        return ( \n            <>\n            {this.allSick && <div id = {\"endmsg\"}>{this.message}</div>}\n            <div>\n                <div>{this.state.nodes}</div>\n                \n                <div>{this.transmissions}</div>\n\n                <div>{this.renderMeetings}</div>\n            </div>\n            </>\n           \n        )\n    }\n}\n\nexport default Plot;","import Plot from './plot.js';\nimport React from 'react';\n\n\nclass Create extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = ({numOfCreations: 0});\n        this.numOfCreations = 0;\n        this.assigned = false;\n        this.clicked = false;\n        this.masks = false;\n        //this.numPeople = document.getElementById('numPeople').value;\n    }\n\n    componentDidMount() {\n        \n        this.assigned = false;\n        let btn = document.getElementById(\"GenerateSimulation\");\n        //this.numPeople = document.getElementById('numPeople').value;\n        let self = this;\n        document.addEventListener('click', this.generate);\n        \n       \n        //btn.onClick = this.generate();\n    }\n\n    generate = event =>{\n        if (event.target.id == 'masks'){\n            this.maskSet();\n            return;\n        }\n        if (event.target.id == 'ResetSimulation'){\n            this.reset();\n            \n            return;\n        }\n\n        if (event.target.id != 'GenerateSimulation' || this.clicked){\n            return;\n        }\n        \n        this.allSick = false;\n        this.clicked = true;\n\n\n        \n\n\n        this.numPeople = document.getElementById('numPeople').value;\n     \n        if (isNaN(this.numPeople)){\n            alert(\"Please enter number of people for simulation\");\n            return;\n        }\n        this.assigned = true;\n        this.numOfCreations ++;\n        this.setState({numOfCreations: this.numOfCreations});\n    }\n\n    maskSet(){\n        if (this.masks){\n            document.getElementById(\"masks\").style.backgroundColor = \"white\";\n        }\n        else {\n            document.getElementById(\"masks\").style.backgroundColor = \"blue\";\n        }\n        this.masks = !this.masks;\n        \n    }\n    reset(){\n        this.clicked = false;\n        this.assigned = false;\n        document.getElementById(\"overshadow\").style.display = 'none';\n        this.allSick = true;\n        this.setState({numOfCreations: this.numOfCreations});\n    }\n\n    callbackFunction = (childData) => {\n        this.numOfCreations = this.numOfCreations + 1;\n    }\n\n\n    render(){\n        if (this.allSick){\n            console.log(\"should cancel all\")    \n        }\n\n        if (!this.assigned){\n            \n            return <div id = \"graphArea\"></div>;\n        }\n       \n        console.log(this.masks)\n        return (\n            \n        <div id = \"graphArea\">\n          <Plot allSick = {this.allSick} callbackFunction = {this.callbackFunction} id = {this.numOfCreations} key = {this.numOfCreations} numOfNodes = {this.numPeople} masks = {this.masks} />\n        </div>\n        )\n    }\n\n}\n\nexport default Create;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './person.js';\nimport Plot from './plot.js';\nimport Create from './create.js';\n\nfunction App() {\n  \n  \n  \n  return (\n    <><div id = \"overshadow\"></div>\n      <div className=\"App\">\n        <div id = \"title\">\n          Covid Visualizer\n        </div>\n\n        <div id = \"topBox\">\n          <div id = \"inputs\">\n            <div id = \"people\" className=\"input\">\n              <input id = \"numPeople\" placeholder=\"100\"></input>\n              <label>Number of People</label>\n            </div>\n            \n            <div id = \"socialDistance\" className=\"input\">\n              <input type=\"range\" placeholder=\"Social Distancing\" id =\"sd\" name=\"cowbell\" min=\"0\" max=\"100\"></input>\n              <label for=\"cowbell\">Level of Social Distancing</label>\n            </div>\n            \n\n            <div id = \"maskBox\" className=\"input\">\n              <div name = \"m\" id = {\"masks\"}></div>\n              <label for=\"m\">Masks</label>\n            </div>\n            \n          </div>\n\n          <div id = \"generate\">\n              <button id=\"GenerateSimulation\">Generate Simulation</button>\n          </div>\n          <div id = \"reset\">\n              <button id=\"ResetSimulation\">Reset Simulation</button>\n          </div>\n        </div>\n        \n        <Create />\n\n        <div id = \"bottomBorder\">\n          <div id = \"negativeCovid\">\n            Negative\n          </div>\n\n          <div id = \"positiveCovid\">\n            Positive\n          </div>\n\n          <div id = \"recoveredCovid\">\n            Recovered\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/coronavirus.a625a7c2.png\";","module.exports = __webpack_public_path__ + \"static/media/angel.db2b3117.png\";","module.exports = __webpack_public_path__ + \"static/media/mountain.7b575a0f.png\";","module.exports = __webpack_public_path__ + \"static/media/company.3d592e87.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}